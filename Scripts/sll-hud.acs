/* Visit sll-base.acs for information */

script "Drowning" ENTER
{
	int drowntimer;
	int maxdrown;
	maxdrown = 30 * 35;
	while (1) {
		if (GetActorProperty(1001, APROP_Waterlevel) == 3) {
			if (!CheckActorInventory(1001, "PowerSuper") && !CheckActorInventory(1001, "PowerHyper") && !CheckActorInventory(1001, "PowerInvulnerable") && (ClassifyActor(0) & ACTOR_ALIVE)) {
				drowntimer++;
				if (drowntimer % (5 * 35) == 0 && drowntimer < (20 * 35)) {
					AmbientSound("sglobal/drowning", 127);
				}
			}
			if (drowntimer > (maxdrown - 350)) {
				if (GetLevelInfo(LEVELINFO_LEVELNUM) != 69) {
					switch (PlayerClass(PlayerNumber())) {
						case Sonic:
							SetMusic("S_DROWN", 0);
							break;
						case Amy:
							SetMusic("A_DROWN", 0);
							break;
						case ClassicSonic:
							SetMusic("C_DROWN", 0);
							maxdrown = 31;
							break;
						case Shadow:
							SetMusic("D_DROWN", 0);
							break;
						default:
							break;
					}
				}
				SetFont("BIGFONT");
				int drowncounter = (maxdrown - drowntimer) / 35;
				if (drowncounter >= 0 && drowncounter <= 9) {
					HudMessage(s:"\c[Sapphire]", d:drowncounter; HUDMSG_PLAIN, 6, CR_UNTRANSLATED, 0.5, 0.55, 1.0 / 35 + 1);
				}
			}
			if (drowntimer > maxdrown)
			{
				DamageActor(1001, AAPTR_PLAYER1, 0, AAPTR_NULL, 9999, "Drowned");
				SetMusic("", 0);
				break;
			}
		}
		else {
			if (drowntimer > (4 * 35) && GetLevelInfo(LEVELINFO_LEVELNUM) != 69) {
				SetMusic("*");
			}
			drowntimer = 0;
		}
		Delay(1);
	}
}

script 69 (void)
{
	if (PlayerClass(PlayerNumber()) == Sonic)
		HudMessage(s:"\c[Sonic] Sonic: \c[White] Consider this your bad Lock & Load!"; HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
}

script "FormTint" (void)
{
	int counter;
	int cdelay = 5;
	bool redFlash = false;
	while (CheckInventory("PowerSuper") || CheckInventory("PowerHyper")) {
		counter++;
		if (counter % cdelay == 0) {
			redFlash = !redFlash;
		}
		Delay(1);
		if (ClassifyActor(0) & ACTOR_ALIVE) {
			switch (PlayerClass(PlayerNumber())) {
				case Amy:
					if (CheckInventory("ChaosEnergy") < 100 && redFlash && GetCvar("LowEnergySound")) {
						FadeTo(255, 0, 0, 0.3, 0.1);
					}
					else {
						FadeTo(123, 13, 102, 0.3, 0.1);
					}
					break;
				default:
					if (CheckInventory("ChaosEnergy") < 100 && redFlash && GetCvar("LowEnergySound")) {
						FadeTo(255, 0, 0, 0.2 + GetCvar("PowerHyper") * 0.1, 0.1);
					}
					else {
						FadeTo(128, 128, 128, 0.1, 0.1);
					}
					break;
			}
		}
	}
	FadeTo(0, 0, 0, 0.0, 0);
}

#define RETICLE_SMALL 1
#define RETICLE_LARGE 2

script "HomingReticle" (void)
{
    str skill_name;
    str skill_control;
	switch (GetCvar("HomingReticle")) {
		case RETICLE_SMALL:
			SetFont("reticlm");
			break;
		case RETICLE_LARGE:
			SetFont("reticle");
			break;
	}
	HudMessage(s:"A"; HUDMSG_LAYER_UNDERHUD|HUDMSG_FADEOUT, 12, CR_WHITE, 0.5, 0.5, 0.1, 0.1);
}

script "Subtitles" (int subtitle)
{
	SetActivator(1001);
	if (GetCvar("Subtitles")) {
		int subtitleref = strparam(s:"gsubtitle", d:subtitle);
		HudMessage(l:subtitleref; HUDMSG_PLAIN, 4, CR_LIGHTBLUE, 1.5, 0.8, 2.0, 1.0);
	}
}

script "AmyBlockTint" enter
{
	bool is_amy = PlayerClass(PlayerNumber()) == Amy;
	bool is_game_over = GetLevelInfo(LEVELINFO_LEVELNUM) == 999;

	while (is_amy && ClassifyActor(0) & ACTOR_ALIVE && !is_game_over) {
		if (CheckInventory("PowerBlocking")) {
			FadeTo(192, 23, 112, 0.2, 0.0);
		}
		else {
			FadeTo(0, 0, 0, 0, 0.0);
		}
		Delay(1);
	}
}

script "DisplayFailures" (int failcount)
{
	if (failcount == 1) {
		HudMessage(s:"You've died ", d:failcount, s:" time..."; HUDMSG_PLAIN, 96, CR_WHITE, 1.5, 0.7, 2.5, 1.0);
	}
	else {
		HudMessage(s:"You've died ", d:failcount, s:" times..."; HUDMSG_PLAIN, 96, CR_WHITE, 1.5, 0.7, 2.5, 1.0);
	}
}

script "ParryEffect" (void)
{
	ACS_NamedSuspend("FormTint", 0);
	SetActivator(1001);
	AmbientSound("sweapons/blockattackx", 127);
	FadeTo(255, 255, 255, 0.8, 0.1);
	Delay(1);
	FadeTo(255, 255, 255, 0.2, 0.1);
	Delay(6);
	ACS_NamedExecute("FormTint", 0);
	FadeTo(0, 0, 0, 0, 0.1);
}