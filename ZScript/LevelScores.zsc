class LevelScores
{
    // At some point I should document the LVLSCORE format...
    // Eh, I can do it later.
    static int GetLevelTargetScore() {
        int target_score = 0;

        int lump = -1;

        while (-1 != (lump = Wads.FindLump("LVLSCORE", lump + 1))) {
            string score_text = Wads.ReadLump(lump);
            target_score += ParseLevelScores(score_text);
        }

        return target_score;
    }

    static int ParseLevelScores(string score_text) {
        Array<String> lines;
        score_text.Split(lines, "\n", TOK_SKIPEMPTY);
        int score = 0;

        foreach (t_line : lines) {
            Array<String> parts;
            t_line.Split(parts, " ", TOK_SKIPEMPTY);

            if (parts.Size() == 2) {
                string level_name = parts[0];
                int result;
                int level_score = parts[1].ToInt();

                if (level.MapName == level_name) {
                    score = level_score;
                }
            }
        }

        return score;
    }
}

class SLL_ScoreHandler : EventHandler
{
    int score;

    override void WorldLoaded(WorldEvent e)
    {
        cvar.FindCvar("GameScore").SetInt(score);
    }

    int GetStyleRank()
    {
        return cvar.FindCvar("StyleRank").GetInt();
    }

    void DeductScore(int amount)
    {
        score -= amount;
        if (score < 0) score = 0;
        cvar.FindCvar("GameScore").SetInt(score);
    }

    void IncrementScore(int amount)
    {
        score += amount;
        cvar.FindCvar("GameScore").SetInt(score);
    }

    bool IsTransformed()
    {
        PlayerPawn player = players[consoleplayer].mo;

        return player.CountInv("PowerSuper") || player.CountInv("PowerHyper");
    }

    override void WorldThingDamaged(WorldEvent e)
    {
        if (!e.thing) {
            return;
        }

        bool player_damaged = e.thing is "PlayerPawn";
        bool player_responsible = e.damagesource && e.damagesource is "PlayerPawn";
        bool enemy_damaged = e.thing.bIsMonster;
        bool enemy_defeated = enemy_damaged && e.damage > e.thing.health;

        if (player_damaged) {
            DeductScore(e.damage * 18);
		}
        if (enemy_defeated) {
            int initial_bonus = e.thing.SpawnHealth() / 5;
            IncrementScore(initial_bonus * (GetStyleRank() + 1));
		}
        else if (enemy_damaged && player_responsible) {
            int initial_bonus = (e.damage / 4) + 1;
            IncrementScore(initial_bonus * (GetStyleRank() + 1));
        }
    }

    override void WorldThingDied(WorldEvent e)
    {
        if (e.thing && e.thing is "PlayerPawn") {
            score = 0;
        }
        cvar.FindCvar("GameScore").SetInt(score);
    }
}
