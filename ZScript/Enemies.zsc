class ActualLostSoul : LostSoul replaces LostSoul
{
    Default
    {
        DropItem "SoulRing";
    }
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            // Since the enemy still technically NEEDS to take damage in order
            // for style to be accumulated, we can just immediately reset their
            // health.
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}

class FastSpiderdemon : SpiderMastermind // 19924
{
	Default
	{
		Tag "E-SP567";
		Speed 200;
		Radius 60;
		Height 100;
		Mass 100000000;
		Obituary "%o isn't very good at secret bosses.";
		PainChance 0;
		PainChance "Eclipse", 256;
		DamageFactor "Eclipse", 0.01;
		DamageFactor "HomingAttack", 0;
		DamageFactor "SonicKick", 2;
		PainChance "Caliburn", 0;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
	States
	{
		Spawn:
			SPID AB 10 A_LookEx(LOF_FULLVOLSEESOUND, 50, 0, 0, 30, "See");
			Loop;
		See:
			SPID A 1 A_Metal;
			SPID ABB 1 A_Chase;
			SPID C 1 A_Metal;
			SPID CDD 1 A_Chase;
			SPID E 1 A_Metal;
			SPID EFF 1 A_Chase;
			Loop;
		Missile:
			SPID A 10 Bright A_FaceTarget;
			TNT1 A 0 A_JumpIf(health < 1500, "SecPhasStart");
			SPID GH 1 Bright A_SpawnProjectile("PlasmaBall");
			SPID H 1 Bright A_SpidReFire();
			Goto Missile+1;
		SecPhasStart:
			SPID A 5 Bright A_PlaySound("spider/sight");
		PMissile:
			TNT1 A 0 ACS_NamedExecute("BossMusic2");
			SPID A 10 Bright A_FaceTarget;
			SPID G 1 Bright A_SpawnProjectile("ChaosEnergyBall");
			SPID H 1 Bright A_SpawnProjectile("ChaosEnergyBallAmy");
			SPID H 1 Bright A_SpidReFire();
			Goto PMissile+2;
		Pain:
			TNT1 A 0 A_JumpIf(health < 1500, "Pain2");
			SPID I 18 A_Pain;
			Goto See;
		Pain2:
			SPID I 12 A_Pain;
			Goto See;
		Death:
			TNT1 A 0 {
				if (target.CountInv("SonicCheck")) {
					target.ACS_NamedExecute("Subtitles", 0, 18);
					A_StartSound("sonic/bossvictory", 8, 0, 1.0, ATTN_NONE);
				}
			}
			SPID J 20 A_Scream;
			SPID K 10 A_NoBlocking();
			TNT1 A 0 A_SpawnItem("GoalRing", 0, 16);
			SPID LMNOPQR 10;
			SPID S 30;
			SPID S -1;
			Stop;
	}
}

class MechZombie : Actor
{
	Default
	{
		Health 80;
		Radius 20;
		Height 56;
		Speed 8;
		PainChance 150;
		PainChance "Spear", 256;
		DamageFactor "Spear", 0.1;
		PainChance "Caliburn", 0;
		Monster;
		+FLOORCLIP;
		SeeSound "grunt/sight";
		AttackSound "grunt/attack";
		PainSound "grunt/pain";
		DeathSound "grunt/death";
		ActiveSound "grunt/active";
		Obituary "%o was destroyed by a mechanised zombie.";
		Tag "Mechanised Zombie";
		DropItem "SoulRing";
		//$Category Lock & Load Enemies
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
 	States
	{
	Spawn:
		POSS AB 10 A_Look;
		Loop;
	See:
		POSS ABCD 2 A_Chase;
		Loop;
	Melee:
		POSS F 2 A_M_Saw();
		POSS F 0 A_JumpIfCloser(40, "Melee");
		Goto See;
	Missile:
		POSS A 0 A_FaceTarget;
		POSS FFF 1 A_SpawnProjectile("NerfedChaosEnergyBall");
		POSS E 36;
		Goto See;
	Pain.Spear:
		TNT1 A 0 ACS_NamedExecute("ReactionTime");
		POSS GGGGGGGGGGG 6 A_Pain;
	Pain:
		POSS G 6 A_Pain;
		Goto See;
	Death:
		POSS H 5;
		POSS I 5 A_Scream;
		POSS J 5 A_NoBlocking;
		POSS K 5;
		POSS L -1;
		Stop;
	XDeath:
		POSS M 5;
		POSS N 5 A_XScream;
		POSS O 5 A_NoBlocking;
		POSS PQRST 5;
		POSS U -1;
		Stop;
	Raise:
		POSS K 5;
		POSS JIH 5;
		Goto See;
	}
}

class WalkingCapsule : Demon
{
	Default
	{
		DropItem "FadingBlueChaosCapsule";
		//$Category Lock & Load Enemies
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
	States
	{
		Spawn:
			SARG AB 10 A_Look;
			Loop;
	}
}

class FrickingCyberdemon : Actor
{
	Default
	{
		Health 8000;
		Radius 50;
		Height 160;
		Mass 4000;
		Speed 25;
		Scale 1.5;
		MeleeRange 300;
		PainChance 20;
		PainChance "Spear", 255;
		PainChance "Parry", 255;
		PainChance "Caliburn", 0;
		DamageFactor "SonicPunch", 0.5;
		DamageFactor "Boost", 0;
		Monster;
		MinMissileChance 160;
		+BOSS
		+MISSILEMORE
		+FLOORCLIP
		+NORADIUSDMG
		+DONTMORPH
		+BOSSDEATH
		+NOINFIGHTING
		SeeSound "cyber/sight";
		PainSound "cyber/pain";
		DeathSound "cyber/death";
		ActiveSound "cyber/active";
		Obituary "%o got obliterated by the fricking Cyberdemon.";
		Tag "Fricking Cyberdemon";
		//$Category Lock & Load Enemies
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
	States
	{
		Spawn:
			CYBR AB 10 A_Look();
			Loop;
		See:
			CYBR A 0 {
				if (!CheckIfInTargetLOS(120, 0, 0, 0))
					A_SetSpeed(100);
				else
					A_SetSpeed(25);
			}
			CYBR A 1 A_Hoof();
			CYBR ABBCC 1 A_Chase();
			CYBR D 1 A_Metal();
			CYBR D 1 A_Chase();
			Loop;
		Missile:
			CYBR A 0 A_JumpIfHigherOrLower("JumpAttack", " ");
			CYBR A 0 A_JumpIfCloser(300, "ShotgunAttack");
			CYBR A 0 A_JumpIfCloser(800, "ProjectileAttack");
		Boost:
			CYBR E 6 {
				A_FaceTarget();
				A_StartSound("cyber/sight");
			}
			TNT1 A 0 A_StartSound("sweapons/boost", 8);
			CYBR FFFFFFFFFFFFFF 1 {
				A_Recoil(-15);
			}
			Goto See;
		JumpAttack:
			CYBR E 12 {
				A_FaceTarget();
				A_StartSound("enemy/cyberjump", CHAN_BODY, CHANF_OVERLAP);
                int jump_height = (target.Pos.Z - Pos.Z) / 4 + 12;
                if (waterlevel >= 1) {
                    jump_height *= 3;
                }
				ThrustThingZ(0, jump_height, 0, 0);
			}
			CYBR A 0 A_JumpIfCloser(1000, "ProjectileAttack");
			Goto Boost;
		ShotgunAttack:
			CYBR E 6 {
				A_FaceTarget();
			}
			CYBR F 12 Bright {
				int sgheight = -25;
				if (Distance2D(target) >= 80) sgheight = 32;
				A_StartSound("weapons/sshotf", CHAN_WEAPON, CHANF_OVERLAP);
				A_CustomBulletAttack(15, 15, 15, 1, "CyberShottyPuff", 0, 0, AAPTR_TARGET, null, sgheight);
			}
			CYBR B 4 A_StartSound("weapons/sshoto", CHAN_WEAPON, CHANF_OVERLAP);
			CYBR B 2 A_StartSound("weapons/sshotl", CHAN_WEAPON, CHANF_OVERLAP);
			CYBR B 2 A_StartSound("weapons/sshotc", CHAN_WEAPON, CHANF_OVERLAP);
			CYBR E 6;
			Goto See;
		ProjectileAttack:
			CYBR E 2 A_FaceTarget();
			TNT1 A 0 {
				if (random(1, 2) == 2) {
					return ResolveState("PlasmaAttack");
				}
				else {
					return ResolveState("RocketAttack");
				}
				return ResolveState(null);
			}
		RocketAttack:
			CYBR FFFFF 3 A_SpawnProjectile("Rocket", 70, -25);
			CYBR E 16;
			Goto See;
		PlasmaAttack:
			CYBR FFFFF 3 {
				A_SpawnProjectile("PlasmaBall", 70, -25, 10);
				A_SpawnProjectile("PlasmaBall", 70, -25);
				A_SpawnProjectile("PlasmaBall", 70, -25, -10);
			}
			Goto See;
		Pain.Spear:
			CYBR GGG 2 A_Pain();
			Goto See;
		Pain.Parry:
			CYBR G 0 A_Recoil(12);
			CYBR GGGGG 6 A_Pain();
			Goto See;
		Pain:
			CYBR G 5 {
				A_Pain();
				for (int x = 0; x < 2; x++) {
					int x = random(-10, 10);
					int y = random(-10, 10);
					A_SpawnItemEx("FadingChaosCapsule", 0, 0, 1, x, y, 10, 0, SXF_NOCHECKPOSITION);
				}
			}
			Goto See;
		Death:
			CYBR H 10;
			CYBR I 10 A_Scream();
			CYBR JKL 10;
			CYBR M 10 A_NoBlocking();
			CYBR NO 10;
			CYBR P 30;
			CYBR P -1 A_BossDeath();
			Stop;
	}
}

class GigantoCyberdemon : FrickingCyberdemon
{
	Default
	{
		Health 20000;
		Radius 100;
		Height 320;
		Mass 4000;
		Speed 30;
		Scale 3;
		Obituary "%o fell at the hands of the Gigantocyberdemon.";
		Tag "Gigantocyberdemon";
		//$Category Lock & Load Enemies
	}
	States
	{
		Missile:
			CYBR A 0 A_JumpIfHigherOrLower("JumpAttack", " ");
			CYBR A 0 A_JumpIfCloser(300, "ShotgunAttack");
			CYBR A 0 A_JumpIfCloser(1600, "ProjectileAttack");
		Boost:
			CYBR E 3 {
				A_FaceTarget();
				A_StartSound("cyber/sight");
			}
			TNT1 A 0 A_StartSound("sweapons/boost", 8);
			CYBR FFFFFFFFFFFFFF 1 {
				A_Recoil(-30);
			}
			Goto See;
		ShotgunAttack:
			CYBR E 4 {
				A_FaceTarget();
			}
			CYBR F 10 Bright {
				int sgheight = -25;
				if (Distance2D(target) >= 80) sgheight = 32;
				A_StartSound("weapons/sshotf", CHAN_WEAPON, CHANF_OVERLAP);
				A_CustomBulletAttack(20, 20, 30, 1, "CyberShottyPuff", 0, 0, AAPTR_TARGET, null, sgheight);
			}
			CYBR B 4 A_StartSound("weapons/sshoto", CHAN_WEAPON, CHANF_OVERLAP);
			CYBR B 2 A_StartSound("weapons/sshotl", CHAN_WEAPON, CHANF_OVERLAP);
			CYBR B 2 A_StartSound("weapons/sshotc", CHAN_WEAPON, CHANF_OVERLAP);
			CYBR E 3;
			Goto See;
		RocketAttack:
			CYBR FFFFFFFFFF 2 {
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, 10);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, 5);
				A_SpawnProjectile("DuellingRocket", 160, -25);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, -5);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, -10);
			}
			CYBR E 16;
			Goto See;
		PlasmaAttack:
			CYBR FFFFFFFFFF 2 {
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, 20);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, 15);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, 10);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, 5);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, -5);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, -10);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, -15);
				A_SpawnProjectile("ChaosEnergyBall", 160, -25, -20);
			}
			Goto See;
		Pain:
			CYBR G 5 {
				A_Pain();
				int x = random(-40, 40);
				int y = random(-40, 40);
				int z = random(10, 30);
				A_SpawnItemEx("FadingRedChaosCapsule", 0, 0, 1, x, y, z, 0, SXF_NOCHECKPOSITION);
			}
			Goto See;
		Death:
			TNT1 A 0 {
				target.A_StartSound("sonic/bossvictory", 0);
				target.ACS_NamedExecute("Subtitles", 0, 18);
			}
			CYBR H 10 A_Quake(9, 70, 0, 1024);
			CYBR I 10 A_Scream();
			CYBR JKL 10;
			CYBR M 10 A_NoBlocking();
			CYBR NO 10;
			CYBR P 70;
			TNT1 A 0 { target.ACS_NamedExecute("GoalRing"); }
			CYBR P -1 A_BossDeath();
			Stop;
	}
}

// Monster replacements, for pain chance, because I can't do it any other way :/
class SLL_Arachnotron : Arachnotron replaces Arachnotron
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_Archvile : Archvile replaces Archvile
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_BaronOfHell : BaronOfHell replaces BaronOfHell
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_Cacodemon : Cacodemon replaces Cacodemon
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_Chaingunner : ChaingunGuy replaces ChaingunGuy
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
    States
    {
        Missile:
            CPOS E 10 A_FaceTarget;
            CPOS FE 3 Bright A_SpawnProjectile("WeakProjectileBullet", 32, 0, random(-5, 5), 0, random(-3, 3));
            CPOS F 1 A_CPosRefire;
            Goto Missile+1;
    }
}
class SLL_Cyberdemon : Cyberdemon replaces Cyberdemon
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_Demon : Demon replaces Demon
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_DoomImp : DoomImp replaces DoomImp
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_Fatso : Fatso replaces Fatso
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_HellKnight : HellKnight replaces HellKnight
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_PainElemental : PainElemental replaces PainElemental
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_Revenant : Revenant replaces Revenant
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_Shotgunner : ShotgunGuy replaces ShotgunGuy
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
    States
    {
        Missile:
            SPOS E 10 A_FaceTarget;
            SPOS F 10 Bright {
                for (int x = 0; x < 10; x++) {
                    A_SpawnProjectile("ProjectilePellet", random(24, 42), 0, random(-2, 2));
                }
            }
            SPOS E 10;
            Goto See;
    }
}
class SLL_SpiderMastermind : SpiderMastermind replaces SpiderMastermind
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
    States
    {
        Missile:
            SPID A 20 Bright A_FaceTarget;
            SPID G 4 Bright A_SpawnProjectile("WeakProjectileBullet", 32, 0, random(-5, 5), 0, random(-3, 3));
            SPID H 4 Bright A_SpawnProjectile("WeakProjectileBullet", 32, 0, random(-5, 5), 0, random(-3, 3));
            SPID H 1 Bright A_SpidRefire;
            Goto Missile+1;
    }
}
class SLL_Spectre : Spectre replaces Spectre
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_WolfensteinSS : WolfensteinSS replaces WolfensteinSS
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
}
class SLL_ZombieMan : ZombieMan replaces ZombieMan
{
	Default
	{
		PainChance "Caliburn", 0;
		PainChance "Parry", 255;
		PainChance "Shockwave", 255;
		DropItem "FadingChaosCapsule";
	}
    override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
    {
        let style = StyleSystem(EventHandler.Find("StyleSystem"));
        if (style && cvar.FindCvar("MustStyle").GetBool() && !style.CanTakeDamage() && damagetype != "Falling") {
            Health += damage;
        }
        return super.TakeSpecialDamage(inflictor, source, damage, damagetype);
    }
 	States
	{
		Missile:
			POSS E 10 A_FaceTarget;
			POSS F 8 Bright A_SpawnProjectile("ProjectileBullet");
			POSS E 8;
			Goto See;
	}
}
// Enemies.zsc is now as big as Base.zsc. I hate this so much. WHY CAN'T IT BE
// EASIERRRRRRRRRRR