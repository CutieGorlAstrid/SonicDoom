class DeathInfo : Object {
	Actor actor;
	int tick;
}

class CyberSpaceArenaHandler : EventHandler
{
	Array<DeathInfo> dead_monsters;
	int current_tick;
	int delay;

	override void WorldThingDied(WorldEvent e)
	{
		if (e.thing && e.thing.bIsMonster && level.mapname == "SDCYBRSP") {
			DeathInfo info = new("DeathInfo");
			info.actor = e.thing;
			info.tick = current_tick;
			dead_monsters.Push(info);
		}
	}

	override void WorldTick () {
		current_tick++;
		delay = 60;
		for (int i = 0; i < dead_monsters.Size(); i++) {
			if (current_tick - dead_monsters[i].tick >= delay) {
				dead_monsters[i].actor.Destroy();
				dead_monsters.Delete(i);
				i--;
			}
		}
	}

    override void NewGame() {
        // This is indirectly related to the Arena, which is why it doesn't
        // have its own event handler
        cvar.FindCvar("CurrentLevel").SetInt(0);
    }
}

class GiveEnergyOnDamage : EventHandler
{
	void GiveEnergy(Actor recipient, int energy, int maxenergy) {
		if (recipient && recipient.CountInv("ChaosEnergy") < maxenergy) {
			if (recipient.CountInv("ChaosEnergy") + energy > maxenergy) {
				energy = maxenergy - recipient.CountInv("ChaosEnergy");
			}
			recipient.A_GiveInventory("ChaosEnergy", energy);
		}
	}

	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.thing && e.thing.bIsMonster && Cvar.FindCvar("GiveEnergyOnDamage").GetBool()) {
			int energy_to_give, min_energy, max_energy;
			if (e.damage > e.thing.health) {
				energy_to_give = e.damage / 16;
				min_energy = 1;
				max_energy = 300;
			}
			else {
				energy_to_give = e.damage / 8;
				min_energy = 15;
				max_energy = 500;
			}
			if (e.damage < min_energy) {
				energy_to_give = min_energy;
			}
			GiveEnergy(e.damagesource, energy_to_give, max_energy);
		}
	}
}

class EnemiesBleedRings : EventHandler
{
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.thing && e.thing.bIsMonster && Cvar.FindCvar("EnemiesBleedRings").GetBool()) {
			int ringcount = e.damage / 64;
			ringcount = clamp(ringcount, 1, 300);
			int maxrange  = e.damage / 48;
			maxrange = clamp(maxrange, 2, 20);
			for (int x = 1; x <= ringcount; x++) {
				int x = random(maxrange * -1, maxrange);
				int y = random(maxrange * -1, maxrange);
				bool ring_exists;
				Actor spawned_ring;
				[ring_exists, spawned_ring] = e.thing.A_SpawnItemEx("DroppedRingEnemy", 0, 0, 1, x, y, 12, 0, SXF_NOCHECKPOSITION);
				if (ring_exists) {
					spawned_ring.Vel += e.thing.Vel / 2;
				}
			}
			FTranslatedLineTarget t;
			for (int offset = 0; offset < 360; offset += 45) {
				e.thing.LineAttack(e.thing.angle + offset, 192, e.thing.pitch, 0, "None", "InvisiblePuff", 0, t);
				if (t.linetarget && t.linetarget is "PlayerPawn") {
					t.linetarget.A_GiveInventory("Health", ringcount / 4);
				}
			}
		}
	}
}

class SpongyEnemies : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.thing && e.thing.bIsMonster && Cvar.FindCvar("SpongyEnemies").GetBool()) {
			e.thing.health *= cvar.FindCvar("Sponginess").GetInt();
			// It really is that fricking simple! :D
		}
	}
}

class DeathCounter : StaticEventHandler
{
	override void PlayerSpawned(PlayerEvent e)
	{
		int counter = cvar.FindCvar("DeathCounter").GetInt();
		if (counter > 0) {
			CallACS("DisplayFailures", counter);
		}
	}
	override void PlayerDied(PlayerEvent e)
	{
		int counter = cvar.FindCvar("DeathCounter").GetInt();
		if (cvar.FindCvar("CountDeaths").GetBool()) {
			cvar.FindCvar("DeathCounter").SetInt(counter + 1);
		}
	}
}

class LastWeaponHandler : StaticEventHandler
{
	string last_weapon;
	string current_weapon;

	override void NetworkProcess(ConsoleEvent e)
	{
		if (e.Name == "quickswap") {
			SwitchWeapon();
		}
	}

	string GetDefaultWeapon()
	{
		PlayerPawn player = players[consoleplayer].mo;

		// Can't really use switch-case here, since we're working with strings

		// We can assume that the player just spawned in, so their weapons are
		// easy enough to guess

		if (player is "SonicPlayer") {
			return "Caliburn";
		}

		if (player is "AmyPlayer") {
			return "SilentRosePistol";
		}

		if (player is "ClassicSonicPlayer") {
			return "ChaosBlaster";
		}

		if (player is "ShadowPlayer") {
			return "HighShovel";
		}

		return "";
	}

	string GetWeapon()
	{
		PlayerPawn player = players[consoleplayer].mo;

		if (player.player.ReadyWeapon == null) {
			return "";
		}

		return player.player.ReadyWeapon.GetClassName();
	}

	override void WorldTick()
	{
		PlayerPawn player = players[consoleplayer].mo;

		if (player.player.ReadyWeapon == null) {
			return;
		}

		if (current_weapon != GetWeapon()) {
			last_weapon = current_weapon;
		}

		if (last_weapon == "") {
			last_weapon = GetDefaultWeapon();
		}

		current_weapon = GetWeapon();
	}

	void SwitchWeapon()
	{
		PlayerPawn player = players[consoleplayer].mo;

		if (!player.CountInv(last_weapon)) {
			last_weapon = GetDefaultWeapon();
		}

		player.A_SelectWeapon(last_weapon);
	}
}

class CheckpointRemovalHandler : EventHandler
{
	override void WorldThingSpawned(WorldEvent e)
	{
		bool checkpoints_disabled = !cvar.FindCvar("CheckpointsEnabled").GetBool();
		bool permadeath_enabled = cvar.FindCvar("PermadeathMode").GetBool();
		bool is_checkpoint = e.thing.GetClassName() == "sp_SaveDisk";

		bool checkpoints_should_spawn = checkpoints_disabled || permadeath_enabled;

		if (checkpoints_should_spawn && is_checkpoint) {
			e.thing.Destroy();
		}
	}
}
