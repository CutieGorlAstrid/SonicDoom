class LockLoadPlayer : PlayerPawn
{
	int DoubleJumpCounter;
	double OldZ;
	bool ReticleActive;
	int JumpAngle;
	Default
	{
		Health 100;
		Speed 4;
		Player.ForwardMove 1, 0.5;
		Player.SideMove 1, 0.5;
		Radius 15;
		Height 42;
		Player.ViewHeight 42.0;
		Player.AttackZOffset 16.5;
		PainChance 250;
		Mass 100;
		Player.MaxHealth 999;
		Player.JumpZ 15.0;
	}
	override int TakeSpecialDamage(Actor inflictor, Actor source, int damage, Name damagetype)
	{
		Super.TakeSpecialDamage(inflictor, source, damage, damagetype);
		if (damage > 0 && damage < 999 && !(player.cheats & CF_GODMODE) && !CountInv("PowerInvulnerable")) {
			if (health >= 20 && damage > health) {
				damage = health - 1;
			}
			A_StartSound("sglobal/loserings", 6);
			int ringcount = damage;
			int maxrange  = damage / 4;
			if (maxrange < 5) maxrange = 5;
			if (maxrange > 15) maxrange = 15;
			if (ringcount > 150) ringcount = 150;
			for (int x = 1; x <= ringcount; x++) {
				int x = random(maxrange * -1, maxrange);
				int y = random(maxrange * -1, maxrange);
				int xoffset;
				if (damagetype == "Falling") {
					xoffset = x * cos(angle) - 75;
				}
				A_SpawnItemEx("DroppedRingPlayer", xoffset, 0, 1, x, y, 15);
			}
		}
		bool IsParrying = CountInv("PowerSwordParry") || CountInv("PowerBlocking");
		if (GetCvar("OneHitMode") && !IsParrying && DamageFactor > 0) {
			return 9999;
		}
		return damage;
	}
	override void FallAndSink(double grav, double oldfloorz)
	{
		if (waterlevel && !player.onground && Vel.Z <= 5) {
			Vel.Z -= Gravity;
		}

		Super.FallAndSink(grav, oldfloorz);
	}
	States
	{
		Spawn:
			PLAY A -1;
			Loop;
		See:
			PLAY ABCD 4;
			Loop;
		Missile:
			PLAY E 12;
			Goto Spawn;
		Melee:
			PLAY F 6 BRIGHT;
			Goto Missile;
		Pain:
			PLAY G 4;
			PLAY G 0;
			PLAY G 4;
			Goto Spawn;
		Death.Drowned:
			TNT1 A 0 A_PlaySound("sglobal/drown");
			Goto Death+2;
		Death:
			TNT1 A 0;
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			TNT1 A 0;
			TNT1 A 0;
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
	override void Tick()
	{
		CheckWallJumpReady();
		CheckEnemyProximity();
		HandleReticle();
		SetPlayerSpeed();
		SetUnderwaterFriction();
		Super.Tick();
	}

	void CheckWallJumpReady()
	{
		bool TouchingWall = false;
		for (int x = 0; x <= 360; x += 90) {
			TouchingWall = CheckLOF(CLOFF_JUMP_ON_MISS | CLOFF_SKIPENEMY | CLOFF_SKIPFRIEND | CLOFF_SKIPOBJECT | CLOFF_MUSTBESOLID | CLOFF_ALLOWNULL | CLOFF_NOAIM_VERT, 32, 0, x);
			if (TouchingWall) {
				JumpAngle = x;
				cvar.FindCvar("CanWallJump").SetBool(TouchingWall);
				break;
			}
		}
		if (!TouchingWall) {
			cvar.FindCvar("CanWallJump").SetBool(false);
		}
	}

	void CheckEnemyProximity()
	{
		cvar.FindCvar("CloseToEnemy").SetBool(CheckLOF(CLOFF_JUMPENEMY | CLOFF_SKIPOBJECT | CLOFF_MUSTBESHOOTABLE | CLOFF_JUMPNONHOSTILE, 128));
		OldZ = Pos.Z;
	}

	void ScaleXYVelocity(double scale, int ptr = AAPTR_DEFAULT)
	{
		// Also implements CheckStopped, because it's private
		let player = self.player;
		let ref = GetPointer(ptr);

		if (ref == NULL) {
			return;
		}

		bool was_moving = ref.Vel != (0, 0, 0);

		ref.Vel.X *= scale;
		ref.Vel.Y *= scale;

		if (was_moving) {
			if (player && player.mo == self && !(player.cheats & CF_PREDICTING) && Vel == (0, 0, 0)) {
				player.mo.PlayIdle();
				player.Vel = (0, 0);
			}
		}
	}

	void SetUnderwaterFriction()
	{
		// This is kinda hacky, but it's better than nothing
		int forward = GetPlayerInput(MODINPUT_FORWARDMOVE);
		int sidem = GetPlayerInput(MODINPUT_SIDEMOVE);
		bool is_moving = forward > 0 || sidem > 0 || forward < 0 || sidem < 0;

		if (waterlevel) {
			bNOFRICTION = true;

			if (GetCvar("IsCrouching")) {
				ScaleXYVelocity(0.99);
			}
			else if (is_moving) {
				ScaleXYVelocity(0.927);
			}
			else if (!player.onground) {
				ScaleXYVelocity(0.98);
			}
			else {
				ScaleXYVelocity(0.85);
			}

			if (Vel.Z >= 1) {
				Vel.Z *= 0.95;
			}
		}
		else {
			bNOFRICTION = false;
		}
	}

	void HandleReticle()
	{
		FTranslatedLineTarget ltinfo;
		bool SonicPrerequisite = CountInv("SonicCheck");
		bool ShadowPrerequisite = CountInv("ShadowCheck") && !player.onground;
		bool AmyPrerequisite = CountInv("AmyCheck") && !player.onground && player.ReadyWeapon.GetClassName() == "PikoPikoHammer";
		bool HomingPrerequisite = SonicPrerequisite || ShadowPrerequisite || AmyPrerequisite;
		if (GetCvar("HomingReticle") && HomingPrerequisite) {
			bool ltattack = LineAttack(angle, 896, pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ | LAF_NOINTERACT, ltinfo, 0);
			let ltarget = ltinfo.linetarget;
			if (ltarget && Distance3D(ltarget) > 128 && health > 0) {
				if (!ReticleActive) {
					A_StartSound("sweapons/reticle", 11);
					ReticleActive = true;
				}
				ACS_NamedExecute("HomingReticle");
			}
			else {
				ReticleActive = false;
			}
			cvar.FindCvar("CanHoming").SetBool(ReticleActive);
		}
		else {
			ReticleActive = false;
			cvar.FindCvar("CanHoming").SetBool(false);
		}
	}

	void SetPlayerSpeed()
	{
		if (GetCvar("ReservedMode")) {
			if (CountInv("PowerHyper")) {
				A_SetSpeed(4);
			}
			else if (CountInv("PowerSuper")) {
				A_SetSpeed(3);
			}
			else {
				A_SetSpeed(2.5);
			}
		}
		else if (CountInv("PowerHyper")) {
			A_SetSpeed(8);
		}
		else if (CountInv("PowerSuper")) {
			A_SetSpeed(6);
		}
		else {
			A_SetSpeed(4);
		}
	}

	double GetCurrentVelocity()
	{
		return sqrt((Vel.X ** 2) + (Vel.Y ** 2));
	}

	int GetDoubleJumpCount()
	{
		if (CountInv("ClassicCheck") && !CountInv("PowerHyper")) {
			return 0; // Classic Sonic can't double jump
		}
		if (CountInv("SonicCheck") && CountInv("PowerHyper")) {
			return 2; // Two extra jumps if you're Hyper Sonic
		}
		return 1; // if all else fails, give an extra jump
	}

	double GetHeightFromFloor()
	{
		return Pos.Z - GetZAt();
	}

	override void MovePlayer()
	{
		// I probably don't need to re-implement all of this,
		// but whatever lmao

		let player = self.player;
		UserCmd cmd = player.cmd;

		if (player.turnticks) {
			player.turnticks--;
			Angle += (180. / TURN180_TICKS);
		}
		else {
			Angle += cmd.yaw * (360./65536.);
		}

		player.onground = (pos.z <= floorz) || bOnMobj || bMBFBouncer || (player.cheats & CF_NOCLIP2);

		if (cmd.forwardmove | cmd.sidemove) {
			double forwardmove, sidemove;
			double bobfactor;
			double friction, movefactor;
			double fm, sm;

			[friction, movefactor] = GetFriction();
			bobfactor = friction < ORIG_FRICTION ? movefactor : ORIG_FRICTION_FACTOR;

			if (!player.onground && !bNoGravity && !waterlevel) {
				movefactor *= level.aircontrol;
				bobfactor  *= level.aircontrol;
			}

			fm = cmd.forwardmove;
			sm = cmd.sidemove;
			[fm, sm] = TweakSpeeds(fm, sm);
			fm *= Speed / 256;
			sm *= Speed / 256;

			if (!(player.cheats & CF_PREDICTING) && (forwardmove != 0 || sidemove != 0)) {
				PlayRunning ();
			}

			if (player.cheats & CF_REVERTPLEASE) {
				player.cheats &= ~CF_REVERTPLEASE;
				player.camera = player.mo;
			}

			forwardmove = fm * movefactor * (35 / TICRATE);
			sidemove = sm * movefactor * (35 / TICRATE);

			if (GetCvar("IsCrouching")) {
				return;
			}

			if (forwardmove) {
				Bob(Angle, cmd.forwardmove * bobfactor / 256., true);
				ForwardThrust(forwardmove, Angle);
			}

			if (sidemove) {
				let a = Angle - 90;
				Bob(a, cmd.sidemove * bobfactor / 256., false);
				Thrust(sidemove, a);
			}
		}
	}

	/* Following code borrowed from https://forum.zdoom.org/viewtopic.php?t=63091 */

	void ForwardThrust (double move, double angle)
	{
		if ((bNoGravity) && Pitch != 0 && !player.GetClassicFlight())
		{
			double zpush = move * sin(Pitch);
			Vel.Z -= zpush;
			move *= cos(Pitch);
		}
		Thrust(move, angle);
	}

	override void CheckMoveUpDown()
	{
		let player = self.player;
		UserCmd cmd = player.cmd;

		if (cmd.upmove < 0)
		{
			if (bNoGravity)
			{
				bNoGravity = false;
			}
		}
		else if (cmd.upmove != 0)
		{
			cmd.upmove = clamp(cmd.upmove, -0x300, 0x300);
			if (bFly || (player.cheats & CF_NOCLIP2))
			{
				Vel.Z = Speed * cmd.upmove / 128.;
				if (!bNoGravity)
				{
					bFly = true;
					bNoGravity = true;
					if ((Vel.Z <= -39) && !(player.cheats & CF_PREDICTING))
					{
						A_StopSound(CHAN_VOICE);
					}
				}
			}
			else if (cmd.upmove > 0 && !(player.cheats & CF_PREDICTING))
			{
				let fly = FindInventory("ArtiFly");
				if (fly != NULL)
				{
					UseInventory(fly);
				}
			}
		}
	}

	/* This concludes the code borrowed from https://forum.zdoom.org/viewtopic.php?t=63091 */

	override void CheckJump()
	{
		let player = self.player;

		double WallJumpOffset = 65;
		double WallJumpDistance = 20;

		bool TouchingWall = GetCvar("CanWallJump");
		int buttons = GetPlayerInput(MODINPUT_BUTTONS);
		int DoubleJumpCount = GetDoubleJumpCount();

		if (player.onground || GetCvar("DidHoming")) {
			/* Reset the double jump counter once you touch the ground
			   or do a Homing Attack */
			DoubleJumpCounter = 0;
			cvar.FindCvar("DidJump").SetBool(false); // Reset the DidJump CVAR as well
		}

		bool JustJumped = GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP);
        bool Flying = bFly && player.cmd.buttons & BT_JUMP;

		cvar.FindCvar("CanJump").SetBool(DoubleJumpCounter < DoubleJumpCount || IsClassicNotHyper());

		if ((JustJumped || Flying) && !IsBoostingMidAir()) {
			if (bNoGravity) {
				Vel.Z = 3.;
			}
			else if (level.IsJumpingAllowed() && player.onground) {
				StandardJumpLogic();
			}
			else if (TouchingWall && GetHeightFromFloor() > 60) {
				DoubleJumpCounter = 0; // You get a free double jump after a wall jump
				DoWallJump(WallJumpOffset, WallJumpDistance, JumpAngle);
			}
			else if (level.IsJumpingAllowed() && !IsHovering() && !(CountInv("ShadowCheck") && GetCvar("CanHoming"))) {
				if (DoDoubleJump(DoubleJumpCounter, DoubleJumpCount)) {
					DoubleJumpCounter++;
				}
			}
		}
	}

	void StandardJumpLogic()
	{
		cvar.FindCvar("DidJump").SetBool(true);
		double jumpvelz = JumpZ * 35 / TICRATE;
		double jumpfac = 0;

		if (jumpfac > 0) {
			jumpvelz *= jumpfac;
		}

		if (GetCvar("IsCrouching")) {
			int maxrange = 170;
			Vel.X *= 1.7;
			Vel.Y *= 1.7;
			Vel.X = clamp(Vel.X, -maxrange, maxrange);
			Vel.Y = clamp(Vel.Y, -maxrange, maxrange);
			jumpvelz *= 1.15;
		}

		double speed = GetCurrentVelocity();
		double slopebonus = (Pos.Z - OldZ) * (speed / 56);
		if (slopebonus < 0)  slopebonus = 0;
		if (slopebonus > 15) slopebonus = 15;
		Vel.Z = jumpvelz + slopebonus;

		bOnMobj = false;
		player.jumpTics = 0;
		if (!(player.cheats & CF_PREDICTING)) {
			A_StartSound("*jump", CHAN_BODY);
		}
	}

	bool DoDoubleJump(int DoubleJumpCounter, int DoubleJumpCount)
	{
		if (GetCvar("Sliding")) {
			A_ChangeVelocity(Vel.X, Vel.Y, JumpZ - 2, CVF_Replace);
			A_StartSound("*jump", CHAN_BODY);
		}
		else {
			bool UnderwaterAndNotClassic = waterlevel > 1 && !CountInv("ClassicCheck");
			if (DoubleJumpCounter < DoubleJumpCount || UnderwaterAndNotClassic) {
				A_ChangeVelocity(Vel.X, Vel.Y, JumpZ - 2, CVF_Replace);
				A_StartSound("*doublejump", CHAN_BODY);
				return true;
			}
		}
		return false;
	}

	void DoWallJump(int WallJumpOffset, int WallJumpDistance, int JumpAngle)
	{
		int WallJumpHeight;
		if (Vel.Z >= 1) {
			WallJumpHeight = Vel.Z + WallJumpOffset;
		}
		else {
			WallJumpHeight = WallJumpOffset;
		}
		ACS_NamedExecute("WallJump", 0, WallJumpHeight, WallJumpDistance, JumpAngle);
	}

	bool IsBoostingMidAir()
	{
		int buttons = GetPlayerInput(MODINPUT_BUTTONS);
		return (CountInv("SonicCheck") && player.ReadyWeapon.GetClassName() == "Caliburn" && (CountInv("PowerSuper") || CountInv("PowerHyper")) && (buttons & BT_ALTATTACK) && !player.onground);
	}

	bool IsClassicNotHyper()
	{
		return (CountInv("ClassicCheck") && !CountInv("PowerHyper"));
	}

	bool IsHovering()
	{
		int buttons = GetPlayerInput(MODINPUT_BUTTONS);
		return (CountInv("ClassicCheck") && buttons & BT_ALTATTACK && (CountInv("PowerSuper") || CountInv("PowerHyper")) && !player.onground);
	}

	override bool CanCrouch()
	{
		player = self.player;
		if (!player.onground) {
			return false;
		}
		Super.CanCrouch();
		return true;
	}

	void SetInitialCrouchSlideSpeed(double initial_speed)
	{
		if (GetCurrentVelocity() > initial_speed) {
			// If the player's already moving fast enough,
			// then use that speed
			initial_speed = GetCurrentVelocity();
		}

		int forward_input = GetPlayerInput(INPUT_FORWARDMOVE) / 6400;
		int side_input = GetPlayerInput(INPUT_SIDEMOVE) / 6144;
		int old_buttons = GetPlayerInput(INPUT_OLDBUTTONS);

		bool just_pressed_crouch = !(old_buttons & BT_CROUCH);

		if (just_pressed_crouch) {
			int x_velocity_change = 0;
			int y_velocity_change = 0;

			if (forward_input < 0) {
				x_velocity_change = -initial_speed;
			}
			else if (forward_input > 0) {
				x_velocity_change = initial_speed;
			}

			if (side_input < 0) {
				y_velocity_change = initial_speed;
			}
			else if (side_input > 0) {
				y_velocity_change = -initial_speed;
			}

			if (!x_velocity_change && !y_velocity_change) {
				return;
			}

			A_ChangeVelocity(x_velocity_change, y_velocity_change, 0, CVF_Relative|CVF_Replace);
		}
	}

	void HandleCrouch(PlayerInfo player, int buttons, bool totallyfrozen)
	{
		if (CanCrouch() && !totallyfrozen && player.cmd.buttons & BT_CROUCH) {
			cvar.FindCvar("IsCrouching").SetBool(true);
			A_SetSize(-1, 24);
			Player.ViewHeight = 24;
			if (GetCurrentVelocity() >= 1.0) {
				SetInitialCrouchSlideSpeed(45.0);
				A_StartSound("*crouchslide", 12, CHANF_NOSTOP);
			}
			else if (!CountInv("ClassicCheck")) A_StopSound(12);
		}
		else {
			cvar.FindCvar("IsCrouching").SetBool(false);
			A_SetSize(-1, 42);
			Player.ViewHeight = 42;
			A_StopSound(12);
		}
	}

	override void CheckCrouch(bool totallyfrozen)
	{
		let player = self.player;
		int buttons = player.cmd.buttons;
		double speed = sqrt((Vel.X ** 2) + (Vel.Y ** 2));

		if (buttons & BT_JUMP) {
			buttons &= ~BT_CROUCH;
		}
		if (player.health > 0 && level.IsCrouchingAllowed() && !GetCvar("Sliding") && !GetCvar("IsSpinDashing")) {
			HandleCrouch(player, buttons, totallyfrozen);
		}
		else A_StopSound(12);
	}

	override void DeathThink()
	{
		// Yet another function I have to wholly re-implement :)

		let player = self.player;
		int dir;
		double delta;

		player.Uncrouch();
		TickPSprites();

		player.onground = (pos.Z <= floorz);
		if (self is "PlayerChunk")
		{ // Flying bloody skull or flying ice chunk
			player.viewheight = 6;
			player.deltaviewheight = 0;
			if (player.onground)
			{
				if (Pitch > -19.)
				{
					double lookDelta = (-19. - Pitch) / 8;
					Pitch += lookDelta;
				}
			}
		}
		else if (!bIceCorpse)
		{ // Fall to ground (if not frozen)
			player.deltaviewheight = 0;
			if (player.viewheight > 6)
			{
				player.viewheight -= 1;
			}
			if (player.viewheight < 6)
			{
				player.viewheight = 6;
			}
			if (Pitch < 0)
			{
				Pitch += 3;
			}
			else if (Pitch > 0)
			{
				Pitch -= 3;
			}
			if (abs(Pitch) < 3)
			{
				Pitch = 0.;
			}
		}
		player.mo.CalcHeight ();

		if (player.attacker && player.attacker != self)
		{ // Watch killer
			double diff = deltaangle(angle, AngleTo(player.attacker));
			double delta = abs(diff);

			if (delta < 10)
			{ // Looking at killer, so fade damage and poison counters
				if (player.damagecount)
				{
					player.damagecount--;
				}
				if (player.poisoncount)
				{
					player.poisoncount--;
				}
			}
			delta /= 8;
			Angle += clamp(diff, -5., 5.);
		}
		else
		{
			if (player.damagecount)
			{
				player.damagecount--;
			}
			if (player.poisoncount)
			{
				player.poisoncount--;
			}
		}
		// Unmodified code ends here

		// Modified code starts here
		if ((player.cmd.buttons & BT_USE || ((deathmatch || alwaysapplydmflags) && sv_forcerespawn)) && !sv_norespawn) {
			if (Level.maptime >= player.respawn_time || ((player.cmd.buttons & BT_USE) && player.Bot == NULL)) {
                let is_cyber_space_arena = level.levelnum == 69;
				if (!cvar.FindCvar("PermadeathMode").GetBool() && !is_cyber_space_arena) {
					player.cls = NULL;

					player.playerstate = (multiplayer || level.AllowRespawn || sv_singleplayerrespawn || G_SkillPropertyInt(SKILLP_PlayerRespawn)) ? PST_REBORN : PST_ENTER;

					if (special1 > 2) {
						special1 = 0;
					}
				}
			}
		}
		// Modified code ends here
	}
    override void CheatGive (String name, int amount)
	{
		int i;
		Class<Inventory> type;
		let player = self.player;

		if (player.mo == NULL || player.health <= 0)
		{
			return;
		}

		int giveall = ALL_NO;
		if (name ~== "all")
		{
			giveall = ALL_YES;
		}
		else if (name ~== "everything")
		{
			giveall = ALL_YESYES;
		}

		if (name ~== "health")
		{
			if (amount > 0)
			{
				health += amount;
				player.health = health;
			}
			else
			{
				player.health = health = GetMaxHealth(true);
			}
		}

		if (giveall || name ~== "backpack")
		{
			// Select the correct type of backpack based on the game
			type = (class<Inventory>)(gameinfo.backpacktype);
			if (type != NULL)
			{
				GiveInventory(type, 1, true);
			}

			if (!giveall)
				return;
		}

		if (giveall || name ~== "ammo")
		{
			// Find every unique type of ammo. Give it to the player if
			// he doesn't have it already, and set each to its maximum.
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let ammotype = (class<Ammo>)(AllActorClasses[i]);

				if (ammotype && GetDefaultByType(ammotype).GetParentAmmo() == ammotype)
				{
					let ammoitem = FindInventory(ammotype);
					if (ammoitem == NULL)
					{
						ammoitem = Inventory(Spawn (ammotype));
						ammoitem.AttachToOwner (self);
						ammoitem.Amount = ammoitem.MaxAmount;
					}
					else if (ammoitem.Amount < ammoitem.MaxAmount)
					{
						ammoitem.Amount = ammoitem.MaxAmount;
					}
				}
			}

			if (!giveall)
				return;
		}

		if (giveall || name ~== "emeralds")
		{
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let emeralds = (class<Inventory>)("ChaosEmeralds");

				if (emeralds != null)
				{
					GiveInventory(emeralds, 1, true);
				}
			}

			if (!giveall)
				return;
		}

		if (giveall || name ~== "keys")
		{
			for (int i = 0; i < AllActorClasses.Size(); ++i)
			{
				if (AllActorClasses[i] is "Key")
				{
					let keyitem = GetDefaultByType (AllActorClasses[i]);
					if (keyitem.special1 != 0)
					{
						let item = Inventory(Spawn(AllActorClasses[i]));
						if (!item.CallTryPickup (self))
						{
							item.Destroy ();
						}
					}
				}
			}
			if (!giveall)
				return;
		}

		if (giveall || name ~== "weapons")
		{
			let savedpending = player.PendingWeapon;
			for (i = 0; i < AllActorClasses.Size(); ++i)
			{
				let type = (class<Weapon>)(AllActorClasses[i]);
				if (type != null && type != "Weapon" && !type.isAbstract())
				{
					// Don't give replaced weapons unless the replacement was done by Dehacked.
					let rep = GetReplacement(type);
					if (rep == type || rep is "DehackedPickup")
					{
						// Give the weapon only if it is set in a weapon slot.
						if (player.weapons.LocateWeapon(type))
						{
							readonly<Weapon> def = GetDefaultByType (type);
							if (giveall == ALL_YESYES || !def.bCheatNotWeapon)
							{
								GiveInventory(type, 1, true);
							}
						}
					}
				}
			}
			player.PendingWeapon = savedpending;

			if (!giveall)
				return;
		}

		if (giveall)
			return;

		type = name;
		if (type == NULL)
		{
			if (PlayerNumber() == consoleplayer)
				A_Log(String.Format("Unknown item \"%s\"\n", name));
		}
		else
		{
			GiveInventory(type, amount, true);
		}
		return;
	}
}

class LLSwitch : Actor
{
	Default
	{
		+SHOOTABLE
		+NOBLOOD
		+DONTFALL
		+NOGRAVITY
		+NOCLIP
		Health 1;
		Mass 100000;
		YScale 0.9;
		Height 30;
		DamageFactor "Normal", 0;
		DeathSound "switches/normbutn";
	}
    override void Tick()
    {
        Thing_Stop(0);
        Super.Tick();
    }
	States
	{
		Death:
			ACTS A -1 A_Scream();
			Stop;
	}
}

class LockLoadWeapon : Weapon
{
	override bool DepleteAmmo(bool altFire, bool checkEnough, int ammouse)
	{
		if ((CountInv("PowerSuper", AAPTR_Player1) || CountInv("PowerHyper", AAPTR_Player1))) {
			if (!altfire) {
				A_GiveInventory("ChaosEnergy", AmmoUse1, AAPTR_Player1);
			}
			else {
				A_GiveInventory("ChaosEnergy", AmmoUse2, AAPTR_Player1);
			}
		}
		super.DepleteAmmo(altFire, checkEnough, ammouse);
		return true;
	}
}

class SlamAtkObject : CustomInventory
{
	int inuse;
	int midfall;
	int zdiff;
	int fall_tics;

	action void DealSlamDamage(int slam_damage)
	{
		bool ok;
		Actor below;
		[ok, below] = TestMobjZ(true);
		if (below) {
			below.DamageMobj(self, null, slam_damage, "Melee");
			if (below.Pos.Z > below.GetZAt()) below.A_ChangeVelocity(0, 0, -64);
		}
	}

	action void DoSlamBounce()
	{
		Vel.Z = 20 + invoker.zdiff / 41;
		if (invoker.zdiff > 300)
			Vel.Z += 2 * (invoker.zdiff / 300);
		cvar.FindCvar("DidJump").SetBool(true);
	}

	action void LaunchEnemies(int range, int thrust)
	{
		for (int set_angle = 0; set_angle <= 360; set_angle++) {
			FTranslatedLineTarget ltinfo;
			bool ltattack = LineAttack(set_angle, range, 0, 0, 'Shockwave', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 0);
			let ltarget = ltinfo.linetarget;
			if (ltarget && (ltarget.bIsMonster || ltarget.GetClassName() == "Doox")) {
				thrust = clamp(thrust, 1, 300);
                ltarget.DamageMobj(self, self, 35, "Shockwave");
				ltarget.Vel.Z = thrust + random(-3, 3);
			}
		}
	}

	action void SlamAttack(bool is_slam_bounce = false)
	{
		A_PlaySound("*slam", 1);
		LaunchEnemies(512, 20 + invoker.zdiff / 41);
		DealSlamDamage(random(1, 8) * 128);
        if (is_slam_bounce) {
            DoSlamBounce();
        }
	}

	override void Tick()
	{
		Super.Tick();
		if (owner.player.onground)
			midfall = false;
	}

	States
	{
		Use:
			TNT1 A 0 A_Overlay(-4, "SlamCheck");
			TNT1 A 0 A_OverlayOffset(-4, 0, 32);
			Fail;
		SlamCheck:
			TNT1 A 0 {
				bool IsHyperAndRClicking = (player.ReadyWeapon.GetClassName() == "Caliburn" || player.ReadyWeapon.GetClassName() == "ClassicAbilities") && GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK && CountInv("PowerHyper");
				if (!IsHyperAndRClicking && !invoker.midfall) {
					invoker.midfall = true;
					invoker.zdiff = Pos.Z - GetZAt();
					return ResolveState("SlamStart");
				}
				return ResolveState(null);
			}
			Stop;
		SlamStart:
			TNT1 A 0 A_PlaySound("*fall", 1);
			/* passthrough */
		SlamAttack:
			TNT1 A 0 A_Stop();
			TNT1 A 0 A_ChangeVelocity(0, 0, -500, CVF_Replace);
			TNT1 A 1
			{
				invoker.fall_tics++;

				if (CountInv("PowerSuper") || CountInv("PowerHyper")) {
					A_CustomPunch(70, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				else {
					A_CustomPunch(45, CPF_PULLIN, 0, "InvisiblePuff", 75, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}

				int OFF_ABILITY = BT_ZOOM | BT_SPEED;

				if (GetPlayerInput(INPUT_BUTTONS) & BT_JUMP && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_JUMP)) {
					bool high_up_enough = Pos.Z - GetZAt() >= 10;
					bool enough_time_passed = invoker.fall_tics >= 6;
					bool just_pressed_crouch = GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_CROUCH;

					if (high_up_enough && enough_time_passed && !just_pressed_crouch) {
						return ResolveState("SlamCancelJump");
					}
				}
				if (GetPlayerInput(INPUT_BUTTONS) & OFF_ABILITY && !(GetPlayerInput(INPUT_OLDBUTTONS) & OFF_ABILITY)) {
					if (invoker.fall_tics >= 4) {
						return ResolveState("SlamCancelOffhandAbility");
					}
				}

				if (player.onground) return ResolveState("SlamDone");

				A_ChangeVelocity(0, 0, -75, CVF_Relative|CVF_Replace);

				return ResolveState(null);
			}
			Goto SlamAttack+1;
		SlamDone:
			TNT1 A 0 {
				invoker.fall_tics = 0;
				invoker.midfall = false;
				if (CountInv("ClassicCheck")) {
					return ResolveState("BoundDone");
				}
				A_SetSpeed(0);
				SlamAttack();
				return ResolveState(null);
			}
			TNT1 AAAAA 1 {
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_JUMP)) {
					DoSlamBounce();
					return ResolveState(null);
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_SetSpeed(2);
			Stop;
		SlamCancelJump:
			TNT1 A 0 {
				A_ChangeVelocity(Vel.X, Vel.Y, 10, CVF_Replace);
				if (GetCvar("CanJump")) {
					A_StopSound(1);
				}
				else {
					A_PlaySound("*doublejump", 1);
				}
			}
			Goto SlamCancel;
		SlamCancelOffhandAbility:
			TNT1 A 0 A_ChangeVelocity(Vel.X, Vel.Y, 0, CVF_Replace);
			Goto SlamCancel;
		SlamCancel:
			TNT1 A 1 {
				invoker.fall_tics = 0;
				invoker.midfall = false;
			}
			TNT1 A 0 A_SetSpeed(2);
			Stop;
		BoundDone:
			TNT1 A 1 A_Stop();
			TNT1 A 1 SlamAttack(true);
			TNT1 A 3;
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0) {
			inuse--;
		}
		bool above_ground = !owner.player.onground;
		bool crouch_pressed = owner.GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH && !(owner.GetPlayerInput(INPUT_OLDBUTTONS) & BT_CROUCH);
		if (owner is "PlayerPawn" && above_ground && crouch_pressed && inuse == 0) {
			owner.UseInventory(self);
			inuse = 6;
		}
	}
}
