class SonicPlayer : LockLoadPlayer
{
	Default
	{
		Player.DisplayName "$sonic";
		Player.Face "SNF";
		Player.SoundClass "sonic";
		Player.StartItem "AcceleratedPistol";
		Player.StartItem "Caliburn";
		Player.StartItem "SonicCheck";
		Player.StartItem "SonicKick";
		Player.StartItem "HomingSnapQuickStep";
		Player.StartItem "SlamAtkObject";
		Player.StartItem "ChaosEnergy", 100;
		Player.WeaponSlot 1, "Caliburn";
		Player.WeaponSlot 2, "AcceleratedPistol";
		Player.WeaponSlot 3, "KineticShotty";
		Player.WeaponSlot 4, "ShurikenCrossbow";
		Player.WeaponSlot 5, "EclipseBlaster";
		Player.WeaponSlot 6, "AirStrikeLauncher";
	}
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod)
	{
		if (CountInv("PowerSwordParry")) {
			if (inflictor != null && inflictor is "Actor" && (!inflictor.bMissile || Distance2D(source) < 100)) {
				ACS_NamedExecute("ParryEffect");
				let oldangle = source.angle;
				source.DamageMobj(self, self, source.health / 3 + damage / 2, "Parry");
				source.A_SetAngle(angle);
				source.A_Recoil(-damage * 2);
				source.A_SetAngle(oldangle);
				let style = StyleSystem(EventHandler.Find("StyleSystem"));
				if (style) style.ParryBonus(Health, damage);
				damage = 0;
			}
		}
		return Super.DamageMobj(inflictor, source, damage, mod);
	}
	override void Tick()
	{
		Super.Tick();
		if (GetPlayerInput(MODINPUT_BUTTONS) & BT_FORWARD && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_FORWARD)) {
			A_GiveInventory("AccelPrerequisite");
		}
		if (player.ReadyWeapon != null && !(player.ReadyWeapon.GetClassName() == "EclipseBlaster" && GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK)) {
			// One of these days I need to stop relying on CVARs
			if (GetCvar("EclipseLimiter") > 0) {
				cvar.FindCvar("EclipseLimiter").SetInt(GetCvar("EclipseLimiter") - 1);
			}
		}
	}
	States
	{
		Pain.Falling:
			TNT1 A 0 {
				switch (random(0, 2)) {
					case 1:
						A_PlaySound("sonic/thanksalotwall", 7);
						ACS_NamedExecute("Subtitles", 0, 3);
						break;
					case 2:
						A_PlaySound("sonic/thiswallsintheway", 7);
						ACS_NamedExecute("Subtitles", 0, 4);
						break;
					default:
						A_PlaySound("sonic/pain", 7);
						break;
				}
				A_PlaySound("sglobal/loserings", 6);
			}
			Goto Spawn;
		Pain:
			PLAY G 4;
			PLAY G 0 A_PlaySound("sglobal/loserings", 6);
			PLAY G 4 A_PlaySound("sonic/pain", 7);
			Goto Spawn;
		Death:
			TNT1 A 0
			{
				if (random(1, 4) == 4) {
					A_PlaySound("sonic/thatwaslame");
					ACS_NamedExecute("Subtitles", 0, 1);
				}
				else {
					A_PlaySound("sonic/scream");
				}
			}
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 1);
			TNT1 A 0 A_PlaySound("sonic/ohno");
			TNT1 A 0 ACS_NamedExecute("Subtitles", 0, 2);
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		Reticle:
			RETI B 1;
			Stop;
	}
}

enum ECheckSolidFootingFlags
{
    CSF_SOLIDGROUND = 1,
    CSF_SOLIDACTORS = 2,

    CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

class BoostEnabledWeapon : LockLoadWeapon
{
	int BoostSpeed;
	bool BoostCheck;
	action void Boost (int form, int InitialBoostSpeed, int MaxBoostSpeed)
	{
		if (!invoker.BoostCheck) {
			int speed = sqrt((Vel.X ** 2) + (Vel.Y ** 2));
			invoker.BoostCheck = true;
			bool PressedForward = GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK && (!(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK));
			if (CountInv("PowerAccel") || PressedForward) {
				invoker.BoostSpeed = MaxBoostSpeed;
				A_PlaySound("sweapons/shockwave", 5);
			}
			else if (speed > InitialBoostSpeed) {
				invoker.BoostSpeed = speed;
			}
			else {
				invoker.BoostSpeed = InitialBoostSpeed;
			}
			A_StartSound("sonic/boost", 6);
			A_StartSound("sweapons/boost", 7);
			A_FireBullets(90, 90, 150, 1 + (form * 998), "BoostPuff", FBF_NORANDOM, 60);
			if (!form) A_TakeInventory("ChaosEnergy", 5);
		}
		switch (form) {
			default:
				/* Sonic */
				A_SetMugShotState("Boost");
				A_TakeInventory("ChaosEnergy", 2);
				break;
			case 1:
				/* Super Sonic */
				A_SetMugShotState("SuperBoost");
				A_TakeInventory("ChaosEnergy", 1);
				break;
			case 2:
				/* Hyper Sonic */
				A_SetMugShotState("HyperBoost");
				break;
		}
		A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
		A_GiveInventory("BoostDamageReduction");
		A_ChangeVelocity(invoker.BoostSpeed, 0, Vel.Z, CVF_Relative|CVF_Replace);
		if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP) && A_CheckFloor("Null")) {
			A_ChangeVelocity(0, 0, invoker.BoostSpeed / 10, CVF_Relative);
		}
		if (form == 2 && GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP)   A_ChangeVelocity(0, 0,  3);
		if (form == 2 && GetPlayerInput(MODINPUT_BUTTONS) & BT_CROUCH) A_ChangeVelocity(0, 0, -3);
		if (invoker.BoostSpeed <= MaxBoostSpeed) invoker.BoostSpeed += 5;
		A_Light(2);
	}
	action void WallCrash()
	{
		A_StopSound(1);
		invoker.BoostCheck = false;
		int CrashSpeed = ((invoker.BoostSpeed/10)+20)*-1;
		int VerticalCrashSpeed = 0;
		if (Vel.Z >= 1) {
			VerticalCrashSpeed = Vel.Z;
		}
		A_ChangeVelocity(CrashSpeed, 0, VerticalCrashSpeed, CVF_Relative|CVF_Replace);
		A_StartSound("sweapons/finalhit", 8);
		if (Health > 20) {
			DamageThing(invoker.BoostSpeed / 3, 17);
		}
	}
	States
	{
		Ready:
			TNT1 A 1;
			Loop;
		Deselect:
			#### A 1 A_Lower();
			Loop;
		Select:
			#### A 1 A_Raise();
			Loop;
		Fire:
			TNT1 A 0;
			Goto Ready;
		BoostStart:
			TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperBoost");
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "SuperBoost");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy"), "Boost");
			Goto BoostEnd;
		Boost:
			BOOS A 1 Boost(0, 75, 175);
			BOOS A 0 A_CheckLOF("WallCrash", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			BOOS A 0 {
				if (Pos.Z - GetZAt() < 60 || waterlevel) {
					A_ReFire();
				}
			}
			Goto BoostEnd;
		SuperBoost:
			BOOS B 1 Boost(1, 100, 200);
			BOOS B 0 A_CheckLOF("WallCrash", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			BOOS B 0 A_ReFire();
			Goto BoostEnd;
		HyperBoost:
			BOOS C 1 Boost(2, 100, 999);
			BOOS C 0 A_CheckLOF("WallCrash", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			BOOS C 0 A_ReFire();
			Goto BoostEnd;
		WallCrash:
			TNT1 A 0 A_JumpIf(!GetCvar("WallCrash"), "BoostEnd");
			TNT1 A 0 WallCrash();
		BoostEnd:
			BOOS A 0 {
				invoker.BoostCheck = false;
				A_StopSound(1);
				A_Light(0);
				if (CountInv("PowerHyper")) A_Overlay(-27, "HyperBoostFadeOut");
				else if (CountInv("PowerSuper")) A_Overlay(-27, "SuperBoostFadeOut");
				else if (CountInv("ChaosEnergy")) A_Overlay(-27, "BoostFadeOut");
			}
			Goto Ready;
		BoostFadeOut:
			BOOS A 5;
			Stop;
		SuperBoostFadeOut:
			BOOS B 5;
			Stop;
		HyperBoostFadeOut:
			BOOS C 5;
			Stop;
	}
}

class Caliburn : BoostEnabledWeapon
{
	double oldVelZ;
	int DamageBonus;
	override void Tick()
	{
		oldVelZ = vel.z;
		super.Tick();
	}

	action state A_CheckSolidFooting(StateLabel label, int flags = CSF_ALL)
	{
		if (invoker.oldVelZ != vel.z) {
			return null;
		}
		if (abs(pos.z - GetZAt()) <= 1) {
			if (flags & CSF_SOLIDGROUND) {
				return ResolveState(label);
			}
		}
		bool ok; Actor below;
		[ok, below] = TestMobjZ(true);
		if (below) {
			if (flags & CSF_SOLIDACTORS) {
				return ResolveState(label);
			}
		}
		if (vel.z == invoker.oldVelZ && (flags & CSF_SOLIDGROUND)) {
			return ResolveState(label);
		}
		return null;
	}

	action void SwordAttack(int damage, double distance, int horizontal_spread = 75, int attack_count = 30)
	{
		A_StartSound("sweapons/swordswing", 9);
		if (GetCvar("EnergyBlades")) FireEnergyBlade(distance);
		PerformMeleeAttack(damage + invoker.DamageBonus * 2, distance, angle, pitch, attack_count, horizontal_spread);
	}

	action void FireEnergyBlade(double distance)
	{
		FTranslatedLineTarget t;
		LineAttack(angle, distance, pitch, 0, 'Melee', "SwordPuff", LAF_ISMELEEATTACK, t);
		if (t.linetarget) return;
		if (CountInv("PowerSuper") || CountInv("PowerHyper")) {
			A_PlaySound("sweapons/soulsurge", 6, 0.5);
			if (CountInv("PowerSuper")) {
				A_FireProjectile("EnergyBlade", 0, 0);
			}
			else if (CountInv("PowerHyper")) {
				A_FireProjectile("HyperEnergyBlade", 0, 0);
			}
		}
	}

	action void PerformMeleeAttack(int damage, double distance, double angle, double pitch, int attack_count, int horizontal_spread)
	{
		if (CountInv("ChaosEnergy") < 2) damage *= 5;
		FTranslatedLineTarget t;
		for (int x = 0; x <= attack_count; x++) {
			double spread_angle = random(horizontal_spread * -1, horizontal_spread);
			int attack_angle = angle + spread_angle;
			LineAttack(attack_angle, distance, pitch, damage / attack_count * random(1, 8), 'Melee', "SwordPuff", LAF_ISMELEEATTACK, t);
			if (t.linetarget) {
				A_StartSound("sweapons/finalhit", CHAN_WEAPON);
			}
		}
	}
	Default
	{
		Weapon.SelectionOrder 1;
		Weapon.Kickback 1;
		Weapon.BobRangeX 0.5;
		Weapon.BobSpeed 1.5;
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			CALI A 1 {
				A_WeaponReady();
				if (GetCvar("SoulSurgeReady")) {
					return ResolveState("SoulCharge");
				}
				return ResolveState(null);
			}
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			TNT1 A 0 {
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) {
					A_Raise(200); // About as close as we can get for "instant"
					return ResolveState("Fire");
				}
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK) {
					A_Raise(200);
					return ResolveState("AltFire");
				}
				return ResolveState(null);
			}
			CALI A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 A_GiveInventory("SwordParry");
			TNT1 A 0 A_JumpIf(!player.onground, "AirSlash");
			Goto Slash1;
		Slash1:
			TNT1 A 0 A_PlaySound("sonic/grunt", 8);
			CAL1 A 1;
			TNT1 A 0 SwordAttack(40, 90);
			TNT1 A 0 { invoker.DamageBonus = 0; }
			CAL1 BCD 1;
			CAL1 EEEEEEEEEEEEEE 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
				invoker.DamageBonus++;
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK && (!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ATTACK))) {
					return ResolveState("Slash2");
				}
				return ResolveState(null);
			}
			Goto Ready;
		BoostedSlash:
			CAL1 A 1;
			TNT1 A 0 SwordAttack(120 + invoker.BoostSpeed, 240);
			Goto Slash1+2;
		BoostedSlashAir:
			CAL3 A 1;
			TNT1 A 0 SwordAttack(240 + invoker.BoostSpeed, 310);
			Goto AirSlash+2;
		Slash2:
			TNT1 A 0 A_PlaySound("sonic/grunt", 8);
			CAL2 A 1;
			TNT1 A 0 SwordAttack(40, 90, true);
			CAL2 BCD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			CAL2 EEEEEEEEEEEEEE 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
				invoker.DamageBonus++;
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK && (!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ATTACK))) {
					return ResolveState("Slash1");
				}
				return ResolveState(null);
			}
			Goto Ready;
		AirSlash:
			TNT1 A 0 A_PlaySound("sonic/grunt", 8);
			CAL3 A 1;
			TNT1 A 0 SwordAttack(240, 160, true);
			CAL3 BCD 1;
			CAL3 EEEEEEEEEE 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
				return ResolveState(null);
			}
			Goto Ready;
		AltFire:
			TNT1 A 0 {
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK && (!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ATTACK))) {
					A_Overlay(-3, "BoostEnd");
					A_GiveInventory("SwordParry");
					if (player.onground) return ResolveState("BoostedSlash");
					else return ResolveState("BoostedSlashAir");
				}
				A_Overlay(-3, "BoostStart");
				return ResolveState(null);
			}
			Goto Ready;
		SoulCharge:
			SOUS AAABBBCCCDDDEEEFFFGGG 1 {
				DamageFactor = 0;
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) {
					cvar.FindCvar("SoulSurgeReady").SetBool(false);
					return ResolveState("SoulChargeFailed");
				}
				return ResolveState(null);
			}
			Goto SoulCharged;
		SoulCharged:
			TNT1 A 0 A_JumpIf(!GetCvar("SoulSurgeReady"), "SoulChargeFailed");
			SOUS HHHHHHHHHHH 1 {
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) {
					return ResolveState("SoulSurge");
				}
				A_SetMugshotState("Rampage");
				cvar.FindCvar("SoulSurgeReady").SetBool(false);
				return ResolveState(null);
			}
			Goto SoulChargeFailed;
		SoulSurge:
			CAL1 E 15 {
				A_CustomPunch(4000, CPF_NOTURN, 0, "InvisiblePuff", 128, 0, 0, "ArmorBonus", "sweapons/finalhit");
				A_Explode(500, 256, XF_NOTMISSILE|XF_THRUSTZ);
				if (!(CountInv("PowerSuper") || CountInv("PowerHyper"))) {
					A_TakeInventory("ChaosEnergy", 400);
				}
				A_StartSound("sweapons/soulsurge", 8);
				A_ChangeVelocity(128, 0, 0, CVF_Relative|CVF_Replace);
				A_GiveInventory("Health", 100);
				cvar.FindCvar("SoulSurgeReady").SetBool(false);
			}
			CALI DCBA 1 {
				DamageFactor = 1;
			}
			Goto Ready;
		SoulChargeFailed:
			SOUS GFEDCBA 3;
			TNT1 A 0 { DamageFactor = 1; }
			Goto Ready;
		Spawn:
			CBRN A -1;
			Stop;
	}
}

class AcceleratedPistol : LockLoadWeapon
{
	int charge;
	action void RecoilBurst()
	{
		int strength_bonus, recoil_bonus, ammo_penalty;
		if (invoker.charge) {
			strength_bonus = invoker.charge * 7;
			recoil_bonus = invoker.charge / 4;
			ammo_penalty = invoker.charge / 6;
			invoker.AmmoUse2 = 8 + ammo_penalty;
		}
		A_StopSound(11);
		A_StartSound("weapons/rbeam", 1);

		int base_strength = 30;
		int pierce_limit = 3;
		string colour1 = "c5feff";
		string colour2 = "c5c6ff";
		int recoil_strength = 5;

		bool fully_charged = invoker.charge >= 50;

		if (fully_charged) {
			base_strength = 45;
			pierce_limit = 7;
			colour1 = "009c9f";
			colour2 = "6364bb";
			recoil_strength = 7;
		}

		A_RailAttack(base_strength + strength_bonus, 0, 1, colour1, colour2, RGF_FULLBRIGHT, 0, "BulletPuff", 0, 0, 0, 25, 1.0, 1.0, "None", 0, 270, pierce_limit);
		A_ChangeVelocity(Cos(Pitch) * (-recoil_strength - recoil_bonus), 0, Sin(Pitch) * (recoil_strength + recoil_bonus), CVF_Relative);

		A_GunFlash("BurstFlash");
		invoker.charge = 0;
		invoker.AmmoUse2 = 8;
	}
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.Kickback 100;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 8;
		Weapon.AmmoGive 60;
		Weapon.BobSpeed 1.5;
		Inventory.PickupMessage "Accelerated Pistol";
		Tag "Accelerated Pistol";
		+FORCEPAIN
		+PUFFONACTORS
		+ALWAYSPUFF
	}
    action actor CheckTarget()
    {
        FTranslatedLineTarget ltinfo;
        bool ltattack = LineAttack(angle, 8192, pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 0);
        return ltinfo.linetarget;
    }
    action void SendEnemyUp(Actor enemy)
    {
        if (enemy == null) {
            return;
        }

        if (enemy.Vel.Z > 0) {
            enemy.Vel.Z += 1;
        }
        else {
            enemy.Vel.Z = 0;
        }
    }
	action void AccelFire()
	{
		A_PlaySound("sweapons/pistol", 1);
		if (!player.onground) {
            A_FireBullets(0, 0, 1, 20, "BulletPuff");
        }
		else {
            A_FireBullets(0, 0, 1, 10, "BulletPuff");
        }
        let hit_enemy = CheckTarget();
        let enemy_touching_floor = hit_enemy && hit_enemy.Pos.Z > hit_enemy.GetZAt();
        let looking_up = pitch < -10;
        if (hit_enemy && enemy_touching_floor && looking_up) {
            SendEnemyUp(hit_enemy);
        }
		A_GunFlash();
		A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
	}
	action state RefireOnAttack()
	{
		bool just_pressed_attack = GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK);
		if (just_pressed_attack && CountInv("ChaosEnergy") >= 2) {
			return ResolveState("Fire");
		}
		return ResolveState(null);
	}
	States
	{
		Ready:
			SPIS A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM);
			Loop;
		Deselect:
			SPIS # 1 A_Lower(20);
			Loop;
		Select:
			SPIS A 1 A_Raise(20);
			Loop;
		Fire:
			SPIS A 1 AccelFire();
			SPIS A 1 RefireOnAttack();
			SPIS A 1 AccelFire();
			SPIS A 1 RefireOnAttack();
			SPIS A 1 AccelFire();
			SPIS A 1 RefireOnAttack();
			SPIS BC 1 RefireOnAttack();
			Goto Ready;
		AltFire:
			SPIS B 1 {
				if (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK) {
					if (invoker.charge == 1) A_StartSound("sweapons/recoilcharge", 1);
					if (invoker.charge > 1 || !GetCvar("RecoilBurstRelease")) A_ZoomFactor(1.2);
					if (invoker.charge < 50) {
						invoker.charge++;
						A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH);
					}
					else {
						A_WeaponReady(WRF_NOBOB|WRF_NOFIRE|WRF_NOSWITCH);
					}
					if (invoker.charge < 2) A_Overlay(-8, "Charge1");
					else if (invoker.charge < 4) A_Overlay(-8, "Charge2");
					else if (invoker.charge < 50) A_Overlay(-8, "Charge3");
					else if (invoker.charge == 50) A_Overlay(-8, "ChargeFull");
					if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) return ResolveState("RecoilBurst");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire("RecoilCharge");
			TNT1 A 0 A_JumpIf(GetCvar("RecoilBurstRelease"), "RecoilBurst");
			TNT1 A 0 {
				A_Overlay(-8, "Uncharge");
				A_ZoomFactor(1);
				A_StopSound(1);
				invoker.charge = 0;
			}
			Goto Ready;
		RecoilBurst:
			TNT1 A 0 A_ZoomFactor(1);
			TNT1 A 0 {
				if (invoker.charge > 49) A_Quake(2, 10, 0, 128, "");
				else A_Quake(1, 10, 0, 128, "");
			}
			SPIS B 1 RecoilBurst();
			SPIS BBBBBBCDEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEDCB 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
				if (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK))
					return ResolveState("Fire");
				return ResolveState(null);
			}
			Goto Ready;
		Flash:
			SPIF A 1 Bright A_Light1;
			Goto LightDone;
		BurstFlash:
			SPIF B 4 Bright A_Light1;
			Goto LightDone;
		Charge1:
			RCBC A 1 Bright;
			Stop;
		Charge2:
			RCBC B 1 Bright;
			Stop;
		Charge3:
			RCBC C 1 Bright;
			Stop;
		ChargeFull:
			RCBC D 1 Bright;
			Stop;
		Uncharge:
			RCBC CBA 1 Bright;
			Stop;
		Spawn:
			PIST A -1;
			Stop;
	}
}

class KineticShotty : LockLoadWeapon
{
	action void ShottyFire()
	{
		A_PlaySound("sweapons/nspeedyshot", 1);
		double overall_vel	= sqrt(Vel.X ** 2 + Vel.Y ** 2);
		int	num_bullets		= 20 + overall_vel / 3;
		A_FireBullets(20, 14, num_bullets, 7, "BulletPuff");
		A_FireBullets(2, 2, 8, 5, "BulletPuff", 0);
		A_GunFlash();
	}
	action void KineticGrenade()
	{
		Actor x, rpg;
		[x, rpg] = A_FireProjectile("RapidGrenade", 0, true, 0, 0, 0, 0);
		if (rpg) {
			rpg.Vel += Vel * 1.2;
		}
	}
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 14;
		Weapon.AmmoUse2 38;
		Weapon.AmmoGive 76;
		Weapon.Kickback 1000;
		Weapon.BobSpeed 1.5;
		Inventory.PickupMessage "Kinetic Shotty";
		Tag "Kinetic Shotty";
		+PUFFONACTORS
		+ALWAYSPUFF
	}
	States
	{
		Ready:
			SCTG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			SCTG # 1 {
				A_Lower(20);
				A_StopSound(6);
			}
			Loop;
		Select:
			SCTG A 1 A_Raise(20);
			Loop;
		Fire:
			SCTG B 1 ShottyFire();
			SCTG BBBBBBBBBBBBBBCDE 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto ForceReload;
		AltFire:
			SCTG B 1 KineticGrenade();
			SCTG BBBBBCDEFFFFFFFFFFFFFEDCB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
        ForceReload:
			SCTG F 1 A_PlaySound("sweapons/forcereload", 6);
			SCTG FFFFFFFFFFFFFFFFFFFFFFFFFFFEDCAAAAAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SCTG A 0 A_ReFire();
			Goto Ready;
		Flash:
			SCTF A 4 Bright;
			Stop;
		Spawn:
			SCAT A -1;
			Stop;
	}
}

class ShurikenCrossbow : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 800;
		Weapon.AmmoUse 32;
		Weapon.AmmoGive 100;
		Weapon.Kickback 1;
		Weapon.BobSpeed 1.5;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "Shuriken Crossbow";
		Tag "Shuriken Crossbow";
	}
	States
	{
		Ready:
			SHRL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			SHRL # 1 A_Lower(20);
			Loop;
		Select:
			SHRL A 1 A_Raise(20);
			Loop;
		Fire:
			SHRL B 1 A_FireProjectile("Shuriken", 0, 1);
			TNT1 A 0 { if (CountInv("PowerHyper")) { A_ReFire(); } }
			SHRL BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBCDEFG 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Spawn:
			SURI A -1;
			Stop;
	}
}

class EclipseBlaster : LockLoadWeapon
{
	action void EclipseFire()
	{
		if (CountInv("PowerHyper")) {
			A_FireProjectile("ChaosEnergyBallEX", 0, 0);
		}
		else {
			A_FireProjectile("ChaosEnergyBall", 0, 1);
		}
	}
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse 3;
		Weapon.AmmoGive 35;
		Weapon.KickBack 1000;
		Weapon.BobSpeed 1.5;
		+EXTREMEDEATH
		Inventory.PickupMessage "Eclipse Blaster Mk. V";
		Tag "Eclipse Blaster Mk. V";
	}
	States
	{
		Ready:
			TNT1 A 0 A_JumpIf(GetCvar("EclipseLimiter") > 1, "Recharging");
			ECBL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Recharging:
			ECBL E 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Goto Ready;
		Deselect:
			ECBL # 1 A_Lower(20);
			Loop;
		Select:
			ECBL A 1 A_Raise(20);
			Loop;
		Fire:
			ECBL B 1 {
				if (GetCvar("EclipseLimiter") < 100) {
					EclipseFire();
					cvar.FindCvar("EclipseLimiter").SetInt(GetCvar("EclipseLimiter") + 2);
				}
				else {
					A_PlaySound("sglobal/error", 4096);
					return ResolveState("EndHeal");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			ECBL DDDDDDDDDDDDDDDDDDDDDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		AltFire:
			ECBL C 1 {
				int ringLimit = 150;
				if ((Health < ringLimit) && CountInv("ChaosEnergy") && !(CountInv("PowerSuper") || CountInv("PowerHyper"))) {
					A_PlaySound("sweapons/healthcharge", 4096);
					A_TakeInventory("ChaosEnergy", 16);
					A_GiveInventory("Health", 3);
					if (Health > ringLimit) { A_SetHealth(ringLimit); }
				}
				else {
					A_PlaySound("sglobal/error", 4096);
					return ResolveState("EndHeal");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			/* passthrough */
		EndHeal:
			ECBL DDDDDDDDDDDDDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Spawn:
			ECLI A -1;
			Stop;
	}
}

class AirStrikeLauncher : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1500;
		Weapon.AmmoUse1 45;
		Weapon.AmmoUse2 45;
		Weapon.AmmoGive 200;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Inventory.PickupMessage "Rocket Rioter";
		Tag "Rocket Rioter";
		Weapon.BobSpeed 1.5;
		Weapon.Kickback 1000;
		+WEAPON.NOAUTOAIM
	}
	action void DecideFire(int amount)
	{
		if (CountInv("PowerHyper")) {
			FireSpreadRockets(amount);
		}
		else {
			FireRocket(!player.onground);
		}
	}
	action void FireRocket(bool airstrike, bool with_velocity = false, double offset_x = 0, double offset_y = 0)
	{
		bool is_transformed = CountInv("PowerSuper") || CountInv("PowerHyper");

		Actor p1, p2;
		[p1, p2] = A_FireProjectile("ChaosRocket", 0, !is_transformed, offset_x, offset_y);

		if (p2 && with_velocity) {
			p2.Vel += Vel;
			if (!player.onground) p2.SetDamage(120);
		}
	}
	action void FireSpreadRockets(int amount)
	{
		int spread_x, spread_y, iterator;
		for (iterator = 1; iterator <= amount; iterator++) {
			if (player.onground) {
				spread_x = random(-30, 30);
				spread_y = random(-30, 30);
				FireRocket(false, spread_x, spread_y);
			}
			else {
				spread_x = random(-60, 60);
				spread_y = random(-60, 60);
				FireRocket(true, spread_x, spread_y);
			}
		}
	}
    action state JustFireOrAltfire()
    {
        if (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)) {
            return ResolveState("Fire");
        }
        if (GetPlayerInput(INPUT_BUTTONS) & BT_ALTATTACK && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ALTATTACK)) {
            return ResolveState("AltFire");
        }
        return ResolveState(null);
    }
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			MISG # 1 A_Lower(20);
			Loop;
		Select:
			MISG A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 DecideFire(7);
			MISG A 1 A_GunFlash();
			MISG BBBBBBBAAAAAAAAAAAAAAAA 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
				return JustFireOrAltfire();
			}
			Goto Ready;
		AltFire:
			TNT1 A 0 FireRocket(!player.onground, true);
			MISG A 1 A_GunFlash();
			MISG BBBBBBBAAAAAAAAAAAAAAAA 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
				return JustFireOrAltfire();
			}
			Goto Ready;
		Flash:
			MISF A 1 Bright A_Light1;
			MISF B 3 Bright;
			MISF CD 3 Bright A_Light2;
			Goto LightDone;
		Spawn:
			LAUN A -1;
			Stop;
	}
}

class SonicKick : CustomInventory
{
	int inuse;
	int EXKick;
	bool DidTarget;
	action bool HomeInOnTarget()
	{
		invoker.DidTarget = false;
		FTranslatedLineTarget ltinfo;
		bool ltattack = LineAttack(angle, 896, pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 0);
		let ltarget = ltinfo.linetarget;
		if (ltarget && Distance3D(ltarget) > 128 && health > 0) {
			target = ltarget;
			invoker.DidTarget = true;
			A_Stop();
			double ltdistance = Distance2D(ltarget);
			A_SetAngle(ltinfo.angleFromSource);
			Vel = (ltarget.Pos - Pos) / 2;
			A_StartSound("sweapons/sdash", 8);
			cvar.FindCvar("DidHoming").SetBool(true);
			return true;
		}
		cvar.FindCvar("DidHoming").SetBool(false);
		return false;
	}
	action void SnapToTarget()
	{
		if (target) {
			double oriX = (-40 - target.radius) * cos(angle) - 0 * sin(angle);
			double oriY = (-40 - target.radius) * sin(angle) + 0 * cos(angle);
			double zoffset;
			if (pitch <= -55) {
				A_SetPitch(-55);
				zoffset = -65;
			}
			else if (pitch < 0) zoffset = pitch - 10;
			else if (pitch < 7.0) zoffset = -10;
			else if (pitch >= 40) {
				A_SetPitch(40);
				zoffset = 30;
			}
			else zoffset = 1.2;
			SetOrigin(target.Vec3Offset(oriX, oriY, zoffset), false);
		}
	}
	action void HomingKnockback()
	{
		if (target && target.GetClassName() == "ChaosRocket") {
			let rocket_velocity = sqrt(target.Vel.X ** 2 + target.Vel.Y ** 2);
			A_ChangeVelocity(rocket_velocity / 1.5, 0, 15, CVF_Relative);
		}
		else {
			A_ChangeVelocity(-12, 0, 15, CVF_Relative);
		}
	}
	action void SonicKickAttack(int damage, int randfactor, int range)
	{
		if (invoker.DidTarget && target != null) {
			ProjectileKickBack = 1000;
			target.DamageMobj(self, self, damage * random(1, randfactor), "SonicKick");
			A_StartSound("sweapons/finalhit", 10);
		}
		else {
			A_CustomPunch(damage * random(1, randfactor), true, CPF_NOTURN, "SonicKickPuff", range, 0, 0, "ArmorBonus", "sweapons/finalhit");
		}
	}
	States
	{
		Use:
			TNT1 A 0 A_Overlay(-2, "FloorCheck");
			TNT1 A 0 A_OverlayOffset(-2, 0, 32);
			Fail;
		FloorCheck:
			TNT1 A 0 { invoker.EXKick = 0; }
			TNT1 A 0 A_CheckFloor("KickAttack");
			TNT1 A 0 { invoker.EXKick = 1; }
		KickAttack:
			TNT1 A 0 A_JumpIf(HomeInOnTarget(), "TargetSnap");
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0 A_PlaySound("sonic/grunt", 8);
			TNT1 A 0 {
				if (!invoker.EXKick) {
					if (CountInv("PowerHyper")) A_Overlay(-5, "HyperGroundKick");
					else if (CountInv("PowerSuper")) A_Overlay(-5, "SuperGroundKick");
					else A_Overlay(-5, "GroundKick");
				}
				else {
					if (CountInv("PowerHyper")) A_Overlay(-5, "HyperAerialKick");
					else if (CountInv("PowerSuper")) A_Overlay(-5, "SuperAerialKick");
					else A_Overlay(-5, "AerialKick");
				}
				A_OverlayOffset(-5, 0, 32);
			}
			Stop;
		TargetSnap:
			TNT1 A 0 { DamageFactor = 0; }
			TNT1 A 1;
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 0 A_PlaySound("sonic/grunt", 8);
			TNT1 A 0 {
				if (!invoker.EXKick) {
					if (CountInv("PowerHyper")) A_Overlay(-5, "HyperGroundKick");
					else if (CountInv("PowerSuper")) A_Overlay(-5, "SuperGroundKick");
					else A_Overlay(-5, "GroundKick");
					A_OverlayOffset(-5, 0, 32);
				}
				else {
					if (CountInv("PowerHyper")) A_Overlay(-5, "HyperAerialKick");
					else if (CountInv("PowerSuper")) A_Overlay(-5, "SuperAerialKick");
					else A_Overlay(-5, "AerialKick");
					A_OverlayOffset(-5, 0, 32);
				}
			}
			TNT1 A 1 A_Stop();
			TNT1 A 1 SnapToTarget();
			TNT1 A 0 HomingKnockback();
			TNT1 A 0 { DamageFactor = 1; }
			TNT1 A 0 { cvar.FindCvar("DidHoming").SetBool(false); }
			Stop;
		GroundKick:
			KICK A 1 A_PlaySound("sweapons/swordswing", 7);
			KICK BC 1;
			KICK D 1 SonicKickAttack(48, 4, 120);
			KICK EF 1;
			Stop;
		AerialKick:
			EAGL A 1 A_PlaySound("sweapons/swordswing", 7);
			EAGL BC 1;
			EAGL D 1 SonicKickAttack(96, 4, 160);
			EAGL E 1;
			Stop;
		SuperGroundKick:
			SKIK A 1 A_PlaySound("sweapons/swordswing", 7);
			SKIK BC 1;
			SKIK D 1 SonicKickAttack(48, 16, 120);
			SKIK E 1;
			Stop;
		SuperAerialKick:
			SEAG A 1 A_PlaySound("sweapons/swordswing", 7);
			SEAG BC 1;
			SEAG D 1 SonicKickAttack(96, 16, 160);
			SEAG E 1;
			Stop;
		HyperGroundKick:
			HKIK A 1 {
				A_PlaySound("sweapons/shockwave", 7);
				A_FireBullets(25, 10, 75, 5, "GibPuff", 0);
			}
			HKIK BC 1;
			HKIK D 1 SonicKickAttack(48, 16, 120);
			HKIK EF 1;
			Stop;
		HyperAerialKick:
			HEAG A 1 {
				A_PlaySound("sweapons/shockwave", 7);
				A_FireBullets(5, 5, 100, 10, "GibPuff", 0);
			}
			HEAG BC 1;
			HEAG D 1 SonicKickAttack(96, 16, 160);
			HEAG E 1;
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (owner.Pos.Z < owner.GetZAt()) {
			owner.SetOrigin((owner.Pos.X, owner.Pos.Y, owner.GetZAt()), false);
		}
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 10;
		}
	}
}

class HomingSnapQuickStep : CustomInventory
{
	int inuse;
	int counter;
	action void DoQuickStepMovement(int QuickStepSpeed, int GivenAngle) {
		int deltaX = QuickStepSpeed * cos(GivenAngle);
		int deltaY = QuickStepSpeed * sin(GivenAngle);

		A_ChangeVelocity(deltaX, deltaY, 0);
	}
	States
	{
		Use:
			TNT1 A 0 A_Overlay(10, "Startup");
			TNT1 A 0 A_OverlayOffset(10, 0, 32);
			Fail;
		Startup:
			TNT1 A 1 {
				FTranslatedLineTarget ltinfo;
				bool ltattack = LineAttack(angle, 896, pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 0);
				let ltarget = ltinfo.linetarget;
				if ((player.onground || !ltarget || !GetCvar("HomingSnap")) && !GetCvar("IsCrouching")) {
					/* Quick Step */
					int input = 0;
					int speed = sqrt(Vel.X ** 2 + Vel.Y ** 2);
					int QuickStepSpeed = 35 + speed;
					if (!player.onground) {
						cvar.FindCvar("DidJump").SetBool(false);
						QuickStepSpeed = 45 + speed;
					}
					A_StartSound("sonic/quickstep", 10);
					DamageFactor = 0;

					int forward = GetPlayerInput(INPUT_FORWARDMOVE);
					int sidem = GetPlayerInput(INPUT_SIDEMOVE);
					if (forward < 0)
						DoQuickStepMovement(QuickStepSpeed, angle + 180);
					if (sidem < 0)
						DoQuickStepMovement(QuickStepSpeed, angle + 90);
					if (sidem > 0)
						DoQuickStepMovement(QuickStepSpeed, angle + 270);
					if (forward > 0 || (forward == 0 && sidem == 0))
						DoQuickStepMovement(QuickStepSpeed, angle);

					return ResolveState("QuickStepEnd");
				}
				else {
					/* Homing Snap */
					if (ltarget && Distance3D(ltarget) > 128 && health > 0 && GetCvar("HomingSnap")) {
						double ltdistance = Distance2D(ltarget);
						double oriX = -120 * cos(angle) - 0 * sin(angle);
						double oriY = -120 * sin(angle) + 0 * cos(angle);
						SetOrigin(ltarget.Vec3Offset(oriX, oriY, 1.2), false);
						A_SetPitch(12);
						A_SetAngle(ltinfo.angleFromSource);
						if (player.ReadyWeapon.GetClassName() == "Caliburn" && ltarget.bIsMonster && (CountInv("ChaosEnergy") >= 400 || CountInv("PowerSuper") || CountInv("PowerHyper"))) {
							A_StartSound("sweapons/soulcharge", 8);
							A_StartSound("sonic/soulcharge", CHAN_BODY);
							cvar.FindCvar("SoulSurgeReady").SetBool(true);
						}
						else {
							A_StartSound("sweapons/sdash", 8);
						}
					}
					else {
						return ResolveState("Null");
					}
					return ResolveState("DashEnd");
				}
				return ResolveState(null);
			}
			TNT1 A 4;
			TNT1 A 0 A_Stop();
			TNT1 A 5;
			Stop;
		DashEnd:
			TNT1 A 1 {
				invoker.counter = 0;
			}
			/* passthrough */
		HomingFloat:
			TNT1 A 1 {
				A_Stop();
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				bool enemyVisible = CheckLOF(CLOFF_JUMPENEMY|CLOFF_SKIPOBJECT|CLOFF_MUSTBESHOOTABLE|CLOFF_JUMPNONHOSTILE, 128);
				invoker.counter++;
				if (invoker.counter > 30 || !enemyVisible || buttons & (BT_CROUCH|BT_ATTACK|BT_ALTATTACK|BT_RELOAD)) {
					return ResolveState("HomingEnd");
				}
				if (buttons & BT_JUMP) {
					A_ChangeVelocity(0, 0, 15, CVF_Replace);
					A_StartSound("*doublejump", CHAN_BODY);
					return ResolveState("HomingEnd");
				}
				return ResolveState(null);
			}
			Loop;
		HomingEnd:
			TNT1 A 0 {
				cvar.FindCvar("SoulSurgeReady").SetBool(false);
			}
			Stop;
		QuickStepEnd:
			TNT1 A 5;
			TNT1 A 5 {
				if (!GetCvar("DidJump") && !GetCvar("IsCrouching")) {
					A_ChangeVelocity(0, 0, Vel.Z, CVF_Replace);
				}
			}
			TNT1 A 0 { DamageFactor = 1; }
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&(BT_ZOOM|BT_SPEED) && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&(BT_ZOOM|BT_SPEED)) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 10;
		}
	}
}

