class ShadowPlayer : LockLoadPlayer
{
	Default
	{
		Player.DisplayName "$shadow";
		Player.Face "SHF";
		Player.SoundClass "shadow";
		Player.StartItem "ShadowMP5";
		Player.StartItem "HighShovel";
		Player.StartItem "ShadowCheck";
		Player.StartItem "ChaosSnap";
		Player.StartItem "ChaosSpearAtk";
		Player.StartItem "HomingAssault";
		Player.StartItem "SlamAtkObject";
		Player.StartItem "ChaosEnergy", 200;
		Player.WeaponSlot 1, "HighShovel", "ShadowKnife";
		Player.WeaponSlot 2, "ShadowMP5";
		Player.WeaponSlot 3, "QuadShotty";
        Player.WeaponSlot 4, "ChaosReaper";
		Player.WeaponSlot 5, "ChaosEmerald";
		Player.WeaponSlot 6, "DualRockets";
	}
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod)
	{
		if (CountInv("PowerSwordParry")) {
			if (inflictor != null && inflictor is "Actor" && (!inflictor.bMissile || Distance2D(source) < 100)) {
				ACS_NamedExecute("ParryEffect");
				let oldangle = source.angle;
				source.DamageMobj(self, self, source.health / 3 + damage / 2, "Parry");
				source.A_SetAngle(angle);
				source.A_Recoil(-damage * 2);
				source.A_SetAngle(oldangle);
				let style = StyleSystem(EventHandler.Find("StyleSystem"));
				if (style) style.ParryBonus(Health, damage);
				damage = 0;
			}
		}
		return Super.DamageMobj(inflictor, source, damage, mod);
	}
	States
	{
		Pain.Falling:
			TNT1 A 0 {
				if (random(0, 3) == 3) {
                    A_PlaySound("shadow/damnit", 7);
                    ACS_NamedExecute("Subtitles", 0, 24);
                }
				else {
                    A_PlaySound("shadow/pain", 7);
				}
				A_PlaySound("sglobal/loserings", 6);
			}
			Goto Spawn;
		Pain:
			PLAY G 4;
			PLAY G 4 A_PlaySound("shadow/pain");
			Goto Spawn;
		Death:
			TNT1 A 0 A_PlaySound("shadow/scream");
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_PlaySound("shadow/scream");
			TNT1 A 0 A_Log("ALL FAIL SHADOW");
			PLAY O 5;
			PLAY P 5 ACS_NamedExecute("DeathMusic", 0, 1);
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
}

class ShadowBoostEnabledWeapon : LockLoadWeapon
{
	int BoostSpeed;
	bool BoostCheck;
	action void Boost(int form, int InitialBoostSpeed, int MaxBoostSpeed)
	{
		if (!invoker.BoostCheck) {
			invoker.BoostCheck = true;
			invoker.BoostSpeed = InitialBoostSpeed;
			A_StartSound("shadow/grunt", 6);
			A_StartSound("sweapons/boost", 7);
			A_TakeInventory("ChaosEnergy", 3);
		}
		switch (form) {
			default:
				/* Shadow */
				A_SetMugShotState("Boost");
				A_FireBullets(60, 60, 150, 1, "BoostPuff", FBF_NORANDOM, 125);
				A_TakeInventory("ChaosEnergy", 1);
				break;
			case 1:
				/* Super Shadow */
				A_SetMugShotState("SuperBoost");
				A_FireBullets(120, 120, 150, 999, "BoostPuff", FBF_NORANDOM, 140);
				break;
		}
		A_PlaySound("sweapons/boosttrail", 1, 1.0, true);
		A_ChangeVelocity(invoker.BoostSpeed, 0, Vel.Z, CVF_Relative|CVF_Replace);
		if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) && !(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP) && A_CheckFloor("Null")) {
			A_ChangeVelocity(0, 0, invoker.BoostSpeed / 10, CVF_Relative);
		}
		if (invoker.BoostSpeed <= MaxBoostSpeed) invoker.BoostSpeed += 5;
		A_Light(2);
	}
	action void WallCrash()
	{
		A_StopSound(1);
		invoker.BoostCheck = false;
		int CrashSpeed = ((invoker.BoostSpeed/10)+20)*-1;
		int VerticalCrashSpeed = 0;
		if (Vel.Z >= 1) {
			VerticalCrashSpeed = Vel.Z;
		}
		A_ChangeVelocity(CrashSpeed, 0, VerticalCrashSpeed, CVF_Relative|CVF_Replace);
		A_StartSound("sweapons/finalhit", 8);
		if (Health > 20) {
			DamageThing(invoker.BoostSpeed / 3, 17);
		}
	}
	States
	{
		Ready:
			TNT1 A 1;
			Loop;
		Deselect:
			#### A 1 A_Lower();
			Loop;
		Select:
			#### A 1 A_Raise();
			Loop;
		Fire:
			TNT1 A 0;
			Goto Ready;
		BoostStart:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "SuperBoost");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy"), "Boost");
			Goto BoostEnd;
		Boost:
			DBST A 1 Boost(0, 90, 120);
			TNT1 A 0 A_SetGravity(2);
			BOOS A 0 A_CheckLOF("WallCrash", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			BOOS A 0 A_ReFire();
			Goto BoostEnd;
		SuperBoost:
			BOOS B 1 Boost(1, 100, 200);
			TNT1 A 0 A_SetGravity(1.6);
			TNT1 A 0 A_CheckLOF("BoostEnd", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
			TNT1 A 0 A_ReFire();
			Goto BoostEnd;
		WallCrash:
			TNT1 A 0 A_JumpIf(!GetCvar("WallCrash"), "BoostEnd");
			TNT1 A 0 WallCrash();
		BoostEnd:
			TNT1 A 0 {
				invoker.BoostCheck = false;
				A_SetGravity(1);
				A_StopSound(1);
				A_Light(0);
			}
			Goto Ready;
	}
}

class HighShovel : ShadowBoostEnabledWeapon
{
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.KickBack 1500;
		Tag "High Shovel";
		Inventory.PickupMessage "\c[ShadowRedBlack]High shovel!";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			SHOV A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			SHOV A 1 A_Raise(20);
			Loop;
		Fire:
			SHOV D 1;
			TNT1 A 0 A_ReFire();
            TNT1 A 0 A_GiveInventory("SwordParry");
			SHOV A 1 A_PlaySound("sweapons/swordswing", 1);
			SHOV B 1;
			SHOV C 1 A_CustomPunch(150, 0, 0, "ShovelAtk", 95, 0, 0, "ArmorBonus", "sweapons/shovelbonk");
			SHOV CCCCCCCCCBA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		AltFire:
			TNT1 A 0 A_Overlay(-3, "BoostStart");
			Goto Ready;
		Spawn:
			SHVL A -1;
			Stop;
	}
}

class ShadowMP5 : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1000;
		Weapon.AmmoUse 2;
		Weapon.AmmoGive 20;
		Weapon.KickBack 15;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Sub-Machine Gun";
		Inventory.PickupMessage "Sub-Machine Gun";
	}
	States
	{
		Ready:
			MP51 A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			MP51 A 1 A_Raise(20);
			Loop;
		Fire:
			MP51 A 1 {
				A_FireBullets(3, 5, -2, 7, "BulletPuff");
				A_PlaySound("sweapons/shadowmp5", CHAN_WEAPON);
				A_GunFlash();
			}
			MP51 A 2;
			Goto Ready;
		Flash:
			MP5F A 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SMG1 A -1;
			Stop;
	}
}

class ChaosEmerald : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoUse 400;
		Inventory.PickupMessage "Chaos Emerald";
		Tag "Chaos Emerald";
		+WEAPON.AMMO_OPTIONAL
	}
	States
	{
		Ready:
			CARM A 1 A_WeaponReady();
			TNT1 A 0
			{
				if (!CountInv("Damn4thChaos")) {
					A_GiveInventory("Damn4thChaos");
					ACS_NamedExecute("Damn4thChaosEmerald");
					ACS_NamedExecute("Subtitles", 0, 17);
				}
                bool prerequisites = !CountInv("PowerSuper") && !CountInv("Charging");
                bool is_moving_fast = sqrt(vel.x ** 2 + vel.y ** 2 + vel.z ** 2) > 20.0;
                bool under_limit = CountInv("ChaosEnergy") < 400;
				if (prerequisites && is_moving_fast && under_limit) {
					A_GiveInventory("ChaosEnergy", 1);
				}
			}
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			CARM A 1 A_Lower(20);
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "AFire");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") < 400, "Error");
			TNT1 A 0 A_JumpIf(CountInv("ChaosEnergy") >= 400, "AFire");
			Goto Ready;
		AFire:
			TNT1 A 0 A_PlaySound("shadow/cgrunt", 2);
			CARM A 1 {
				if (CountInv("PowerSuper")) { A_FireProjectile("SuperChaosEnergyBall", 0, false); }
				else { A_FireProjectile("SuperChaosEnergyBall", 0, true); }
			}
			CARM BCDEEEEEEEEEEEDCB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire:
			CARM F 1 WeaponHealing(300);
			TNT1 A 0 A_ReFire();
			/* passthrough */
		EndHeal:
			CARM EEEEEEEEDCB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Spawn:
			CHSM G -1;
			Stop;
	}
}

class ShadowKnife : ShadowBoostEnabledWeapon
{
	int hasKnife;
	Default
	{
		Weapon.SelectionOrder 3800;
		Weapon.KickBack 0;
		Inventory.PickupMessage "Troll Slaiying Knife";
		Tag "Troll Slaiying Knife";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
        +WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			TNT1 A 0
			{
				if (invoker.hasKnife != 1) {
					invoker.hasKnife = 1;
					A_StartSound("theycant/trollyouif", 9);
					ACS_NamedExecute("Subtitles", 0, 16);
				}
			}
			KNIF A 1 A_WeaponReady;
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			KNIF A 1 A_Raise(20);
			Loop;
		Fire:
			KNIF BBCCDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			KNIF E 6 A_CustomPunch(6900, true, 0, "ShadowMeleeAtk", 64, 0, 0, "ArmorBonus", "sonicdoom/finalhit");
			KNIF CCBBBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0 A_Overlay(-3, "BoostStart");
			Goto Ready;
		Spawn:
			SLAI Y -1;
			Stop;
	}
}

class QuadShotty : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 400;
		Weapon.AmmoUse 25;
		Weapon.AmmoGive 160;
		Weapon.Kickback 975;
		Weapon.AmmoType "ChaosEnergy";
		Inventory.PickupMessage "Quarternary Decimator";
		Tag "Quarternary Decimator";
	}
	States
	{
		Ready:
			SHT4 A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			SHT4 A 1 A_Raise(20);
			Loop;
		Fire:
			SHT4 A 1 {
				A_FireBullets(18, 15, 12, 36, "BulletPuff");
				A_PlaySound("weapons/sshotf", CHAN_WEAPON);
			}
            TNT1 A 0 A_GunFlash();
			SHT4 BBBBBBBBBBB 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			}
			TNT1 A 0 { if (CountInv("PowerSuper")) { A_ReFire(); } }
			SHT4 BBBBBBBBBBBBBBBBBBBBBBB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			SHT4 A 4 A_PlaySound("weapons/sshotl");
			SHT4 C 10 A_PlaySound("weapons/sshotc");
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Flash:
			SH4F A 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			SGN2 A -1;
			Stop;
	}
}

class ChaosReaper : LockLoadWeapon
{
    Default
    {
        Weapon.KickBack 900;
        Weapon.AmmoType1 "ChaosEnergy";
        Weapon.AmmoType2 "ChaosEnergy";
        Weapon.AmmoUse1 42;
        Weapon.AmmoUse2 21;
        Weapon.AmmoGive 256;
        Inventory.PickupMessage "Chaos Reaper";
        Tag "Chaos Reaper";
    }
    action void FireSpreadShot(int distance)
    {
        A_GunFlash();
        A_FireProjectile("ChaosEnergyBall", distance * -2, 1);
        A_FireProjectile("ChaosEnergyBall", distance * -1, 0);
        A_FireProjectile("ChaosEnergyBall", 0, 0);
        A_FireProjectile("ChaosEnergyBall", distance, 0);
        A_FireProjectile("ChaosEnergyBall", distance * 2, 0);
    }
    States
    {
        Ready:
            BSTA AAABBBCCCDDDBBB 1 Bright A_WeaponReady();
            Loop;
        Deselect:
            #### A 1 A_Lower(20);
            Loop;
        Select:
            BSTA A 1 Bright A_Raise(20);
            Loop;
        Fire:
            BSTA E 0 A_GunFlash();
            BSTA E 0 A_ChangeVelocity(Cos(Pitch) * -18, 0, Sin(Pitch) * 18, CVF_Relative);
            BSTA E 0 A_StartSound("sweapons/shadowcrossbow", CHAN_WEAPON);
            BSTA E 2 Bright A_FireBullets(0, 0, 9, 36, "BulletPuff");
            BSTA FGH 2 Bright;
            BSTA IIIIIIIIIIIIIIII 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA IIJJJJJJ 1 Bright Offset(0,31) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA JJ 1 Offset(0,32) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA JJ 1 Offset(0,30) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA KK 1 Offset(0,31) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA KKKKKKLM 1 Offset(0,32) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            Goto Ready;
        AltFire:
            BSTA E 0 A_ChangeVelocity(Cos(Pitch) * -12, 0, Sin(Pitch) * 12, CVF_Relative);
            BSTA E 0 A_StartSound("sweapons/shadowcrossbow", CHAN_WEAPON);
            BSTA E 3 Bright FireSpreadShot(5);
            BSTA E 3 Bright FireSpreadShot(7);
            BSTA E 3 Bright FireSpreadShot(9);
            BSTA E 3 Bright FireSpreadShot(11);
            BSTA FGH 2 Bright;
            BSTA IIIIIIIIIIIIIIII 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA IIJJJJJJ 1 Bright Offset(0,31) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA JJ 1 Offset(0,32) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA JJ 1 Offset(0,30) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA KK 1 Offset(0,31) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            BSTA KKKKKKLM 1 Offset(0,32) A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
            Goto Ready;
        Flash:
            TNT1 A 2 Bright A_Light1();
            TNT1 A 2 Bright A_Light2();
            TNT1 A 1 Bright A_Light1();
            Goto LightDone;
        Spawn:
            WBOW A -1;
            Stop;
    }
}

Class DualRockets : LockLoadWeapon
{
	Default
	{
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse1 48;
		Weapon.AmmoUse2 48;
		Weapon.AmmoGive 128;
		Inventory.PickupMessage "Dual Assimilator";
		Tag "Dual Assimilator";
		+Weapon.Explosive
	}
	States
	{
		Ready:
			DGLG A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			DGLG A 1 A_Raise(20);
			Loop;
		Fire:
			DGLG A 3;
			DGLG B 7 Bright
			{
                A_FireProjectile("DuellingRocket", -3, 1,  3);
                A_FireProjectile("DuellingRocket", 3, 1, -3);
			}
			DGLG AAAAAAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		AltFire:
			DGLG A 3;
			DGLG B 7 Bright
			{
                A_FireProjectile("DuellingRocketUnguided", -3, 1,  3);
                A_FireProjectile("DuellingRocketUnguided", 3, 1, -3);
			}
			DGLG AAAAAAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Spawn:
			DOUG A -1;
			Stop;
	}
}

class ChaosSpearAtk : CustomInventory
{
	int inuse;
	States
	{
		Use:
			TNT1 A 0 A_Overlay(-2, "AttackStart");
			TNT1 A 0 A_OverlayOffset(-2, 0, 32);
			Fail;
		AttackStart:
			TNT1 A 0 {
				bool enemyVisible = CheckLOF(CLOFF_JUMPENEMY|CLOFF_SKIPOBJECT|CLOFF_MUSTBESHOOTABLE|CLOFF_JUMPNONHOSTILE, 128);
				if (enemyVisible || CountInv("ChaosEnergy") < 2) return ResolveState("Punch");
				else return ResolveState("Spear");
			}
		Punch:
			TNT1 A 0 A_PlaySound("sweapons/swordswing", 1);
			DPNL ABC 1;
			DPNL D 2 {
				if (CountInv("PowerSuper")) {
					A_CustomPunch(99999, true, CPF_NOTURN, "ExplosionPuff", 128, 0, 0, "ArmorBonus", "weapons/sshotf");
					A_Explode(200, 200, 0, true, 200, 0, 10, "ExplosionPuff", "ShadowMelee");
					A_StartSound("weapons/rocklx", 17);
					A_Quake(4, 20, 15, 15);
				}
				else {
					A_CustomPunch(random(1,32)*30, true, CPF_NOTURN, "ShadowMeleeAtk", 128, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
			}
			DPNL CBA 1;
			Stop;
		Spear:
			SARM ABC 1;
			SARM D 6 {
				A_PlaySound("sweapons/chaosspear", CHAN_WEAPON);
				if (CountInv("PowerSuper")) {
					A_FireProjectile("ChaosSpearEX", -10, false);
					A_FireProjectile("ChaosSpearEX",  -5, false);
					A_FireProjectile("ChaosSpearEX",   0, false);
					A_FireProjectile("ChaosSpearEX",   5, false);
					A_FireProjectile("ChaosSpearEX",  10, false);
				}
				else {
					A_FireProjectile("ChaosSpear", 0, false);
					A_TakeInventory("ChaosEnergy", 2);
				}
			}
			SARM CBA 1;
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		bool CanHomingWithOffhand = cvar.FindCvar("CanHoming").GetBool() && cvar.FindCvar("HomingAssaultInput").GetInt() == 2;
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS) & BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_RELOAD) && inuse == 0 && !CanHomingWithOffhand)
		{
			owner.UseInventory(self);
			inuse = 3;
		}
	}
}

class ChaosSnap : CustomInventory
{
	int inuse;
	int counter;
	override void Tick()
	{
		if (owner.A_CheckFloor("Null")) {
			counter = 0;
		}
		Super.Tick();
	}
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-3, "CountCheck");
		TNT1 A 0 A_OverlayOffset(-3, 0, 32);
		Fail;
	CountCheck:
		TNT1 A 0 {
			invoker.counter++;
			int maxCount;
			if (player.ReadyWeapon.GetClassName() == "ChaosEmerald") {
				maxCount = 3;
			}
			else {
				maxCount = 2;
			}
			return A_JumpIf(invoker.counter <= maxCount || CountInv("PowerSuper"), "Snap");
		}
		Stop;
	Snap:
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 A_StartSound("shadow/teleport", 7);
		TNT1 A 0
		{
			int forward = GetPlayerInput(MODINPUT_FORWARDMOVE);
			int sidem = GetPlayerInput(MODINPUT_SIDEMOVE);
			int buttons = GetPlayerInput(MODINPUT_BUTTONS);
			int input = 0;
			int SnapSpeed = 100;
            int VSnapSpeed = 150;
			DamageFactor = 0;

			if (forward > 0) {
				A_ChangeVelocity(SnapSpeed, 0, 0, CVF_Relative);
				input = 1;
			}

			if (sidem < 0) {
				A_ChangeVelocity(0, SnapSpeed, 0, CVF_Relative);
				input = 1;
			}

			if (sidem > 0) {
				A_ChangeVelocity(0, SnapSpeed * -1, 0, CVF_Relative);
				input = 1;
			}

			if (forward < 0) {
				A_ChangeVelocity(SnapSpeed * -1, 0, 0, CVF_Relative);
				input = 1;
			}

			if (!input) {
				ThrustThingZ(0, VSnapSpeed, 0, 0);
			}
		}
		TNT1 A 5;
		TNT1 A 0 {
			if (player.onground) {
				A_ChangeVelocity(Vel.X / 2, Vel.Y / 2, Vel.Z / 2, CVF_Replace);
			}
			else {
				A_ChangeVelocity(Vel.X / 3, Vel.Y / 3, Vel.Z / 3, CVF_Replace);
			}
		}
		TNT1 A 5;
		TNT1 A 0 { DamageFactor = 1; }
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&(BT_ZOOM|BT_SPEED) && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&(BT_ZOOM|BT_SPEED)) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 10;
		}
	}
}

class HomingAssault : CustomInventory
{
	int inuse;
	bool DidTarget;
	action bool HomeInOnTarget()
	{
		invoker.DidTarget = false;
		FTranslatedLineTarget ltinfo;
		bool ltattack = LineAttack(angle, 896, pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 0);
		let ltarget = ltinfo.linetarget;
		if (ltarget && Distance3D(ltarget) > 128 && health > 0) {
			target = ltarget;
			invoker.DidTarget = true;
			A_Stop();
			double ltdistance = Distance2D(ltarget);
			A_SetAngle(ltinfo.angleFromSource);
			Vel = (ltarget.Pos - Pos) / 2;
			cvar.FindCvar("DidHoming").SetBool(true);
			return true;
		}
		cvar.FindCvar("DidHoming").SetBool(false);
		return false;
	}
	action void DamageTarget(Actor damagetarget)
	{
		target.DamageMobj(self, null, 25 * random(2, 6), "ShadowMelee");
		A_Explode(35, 256, 0, false, 128);
	}
	action void SnapToTarget()
	{
		if (target) {
			double oriX = (-40 - target.radius) * cos(angle) - 0 * sin(angle);
			double oriY = (-40 - target.radius) * sin(angle) + 0 * cos(angle);
			double zoffset;
			if (pitch <= -55) {
				A_SetPitch(-55);
				zoffset = -65;
			}
			else if (pitch < 0) zoffset = pitch - 10;
			else if (pitch < 7.0) zoffset = -10;
			else if (pitch >= 40) {
				A_SetPitch(40);
				zoffset = 40;
			}
			else zoffset = 1.2;
			ProjectileKickBack = 1000;
			SetOrigin(target.Vec3Offset(oriX, oriY, zoffset), false);
			DamageTarget(target);
		}
	}
	States
	{
		Use:
			TNT1 A 0 A_Overlay(-4, "HomingAttack");
			TNT1 A 0 A_OverlayOffset(-4, 0, 32);
			Fail;
		HomingAttack:
			TNT1 A 0 A_JumpIf(HomeInOnTarget(), "TargetSnap");
			Stop;
		TargetSnap:
			TNT1 A 0 { DamageFactor = 0; }
			TNT1 A 1 A_StartSound("sweapons/sdash", 8);
			TNT1 A 0 A_AlertMonsters();
			TNT1 A 1 A_Stop();
			TNT1 A 1 SnapToTarget();
			TNT1 A 0 A_ChangeVelocity(-6, 0, 16, CVF_Relative);
			TNT1 A 0 { DamageFactor = 1; }
			TNT1 A 0 { cvar.FindCvar("DidHoming").SetBool(false); }
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
        if (cvar.FindCvar("HomingAssaultInput").GetInt() > 0) {
            if (owner.Pos.Z < owner.GetZAt()) {
                owner.SetOrigin((owner.Pos.X, owner.Pos.Y, owner.GetZAt()), false);
            }

            if (inuse > 0) {
                inuse--;
            }

            int ActivationKey = BT_JUMP;
            if (cvar.FindCvar("HomingAssaultInput").GetInt() == 2) {
                ActivationKey = BT_RELOAD;
            }

            if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS) & ActivationKey && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS) & ActivationKey) && inuse == 0 && !owner.player.onground)
            {
                owner.UseInventory(self);
                inuse = 15;
            }
        }
	}
}
