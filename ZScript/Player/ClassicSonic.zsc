class ClassicSonicPlayer : LockLoadPlayer
{
	Default
	{
		DamageFactor "RocketStream", 0.2;
		Player.DisplayName "$classic";
		Player.SoundClass "classic";
		Player.Face "CLF";
		Player.StartItem "ClassicAbilities";
		Player.StartItem "SpeedforcePistol";
		Player.StartItem "ChaosEnergy", 100;
		Player.StartItem "ClassicCheck";
		Player.StartItem "SonicThok";
		Player.StartItem "SpinAttack";
		Player.StartItem "SlamAtkObject";
		Player.WeaponSlot 1, "ClassicAbilities";
		Player.WeaponSlot 2, "SpeedforcePistol";
		Player.WeaponSlot 3, "SpeedyShotgun";
		Player.WeaponSlot 4, "ChaosRain";
		Player.WeaponSlot 5, "ChaosBlaster";
		Player.WeaponSlot 6, "ClassicRocketStream";
	}
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod)
	{
		if (CountInv("PowerSwordParry")) {
			if (inflictor != null && inflictor is "Actor") {
				ACS_NamedExecute("ParryEffect");
				let oldangle = source.angle;
				source.A_DamageSelf(source.health / 3 + damage / 2, "Parry");
				source.A_SetAngle(angle);
				source.A_Recoil(-damage * 2);
				source.A_SetAngle(oldangle);
				let style = StyleSystem(EventHandler.Find("StyleSystem"));
				if (style) style.score += 25000;
				damage = 0;
			}
		}
		return Super.DamageMobj(inflictor, source, damage, mod);
	}
	States
	{
		Pain:
			TNT1 A 0 A_StartSound("sglobal/loserings", 6);
			TNT1 A 0 { if (random(1, 4) == 4) { A_StartSound("classic/pain", 7); } }
			PLAY G 4;
			PLAY G 4;
			Goto Spawn;
		Death:
			TNT1 A 0
			{
				if (random(1,5) == 4) {
					ACS_NamedExecute("Subtitles", 0, 11);
					A_StartSound("classic/memorycard");
				} else {
					A_StartSound("classic/death");
				}
			}
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_JumpIf(!GetCvar("DeathMusic"), "OhNo");
			TNT1 A 0 A_StartSound("classic/ohno");
			TNT1 A 0 A_Log("NO WAY? NO WAY!");
			TNT1 A 0 { if (GetCvar("DeathMusic")) { ACS_NamedExecute("DeathMusic", 0, 1); } }
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
		OhNo:
			TNT1 A 0 A_Log("OH NO");
			TNT1 A 0 A_StartSound("classic/ohno");
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
	}
}

class ClassicAbilities : LockLoadWeapon replaces Fist
{
	int SpinCharges;
	int ShweeDelay;
	int HoverCounter;
	int HealingCounter;
	bool DidWallDash;
	Default
	{
		Weapon.SelectionOrder 3700;
		Weapon.Kickback 10;
		Tag "Sonic the Hedgehog";
		+Weapon.MELEEWeapon
		+Weapon.NOAUTOFIRE
	}
	action void SetHeight(int height)
	{
		A_SetSize(-1, height);
		Player.ViewHeight = height;
	}
	override void Tick()
	{
		Super.Tick();
		if (owner.player.onground) DidWallDash = false;
	}
	States
	{
		Ready:
			TNT1 A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			TNT1 A 1 A_Lower(200);
			Loop;
		Select:
			TNT1 A 1 A_Raise(200);
			Loop;
		Fire:
			TNT1 A 0 {
				invoker.SpinCharges = 0;
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				invoker.ShweeDelay = 10;
				if (A_CheckFloor("Null")) return ResolveState("SpinCharge");
				else if (GetCvar("CanWallJump") && !invoker.DidWallDash) return ResolveState("WallCharge");
                else if (!A_CheckFloor("Null")) return ResolveState("DropCharge");
				return ResolveState(null);
			}
			Goto Ready;
		AltFire:
			TNT1 A 0 {
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				bool moving_forward = GetPlayerInput(MODINPUT_FORWARDMOVE) / 6400 >= 1;
				if (!(CountInv("PowerSuper") || CountInv("PowerHyper")) && A_CheckFloor("Null") && (buttons & BT_CROUCH)) {
					return ResolveState("Restoration");
				}
				if ((CountInv("PowerSuper") || CountInv("PowerHyper")) && !A_CheckFloor("Null") && (buttons & BT_ALTATTACK)) {
					invoker.HoverCounter = 1;
					return ResolveState("Hover");
				}
				if (!GetCvar("IsSpinDashing") && !(buttons & BT_CROUCH) && moving_forward && A_CheckFloor("Null")) {
					A_StartSound("sWeapons/peeloutrelease", 6);
					if (random[HereWeGo](1, 2) == 1) {
						int driftline = random(1, 4);
						ACS_NamedExecute("Subtitles", 0, 11 + driftline);
						switch (driftline) {
							case 1:
								A_StartSound("classic/ifyoucan", 7);
								break;
							case 2:
								A_StartSound("classic/herego", 7);
								break;
							case 3:
								A_StartSound("classic/underestimate", 7);
								break;
							case 4:
								A_StartSound("classic/teria", 7);
								break;
						}
					}
					return ResolveState("Drift");
				}
				return ResolveState(null);
			}
			Goto Ready;
		Drift:
			TNT1 A 0 {
				A_ClearOverlays(0, 0);
				A_ChangeVelocity(10, 0, 0, CVF_Relative);
				if (!CountInv("PowerSuper") && !CountInv("PowerHyper") && A_CheckFloor("Null")) {
					A_GiveInventory("ChaosEnergy");
				}
			}
			TNT1 A 0 A_StartSound("sweapons/drift", 5);
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "SuperDrift");
			TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperDrift");
			SPIN A 1;
			Goto CheckStillDrifting;
		SuperDrift:
			SSPN A 1;
			Goto CheckStillDrifting;
		HyperDrift:
			HSPN A 1;
			Goto CheckStillDrifting;
		CheckStillDrifting:
			TNT1 A 0 {
				bool moving_forward = GetPlayerInput(MODINPUT_FORWARDMOVE) / 6400 >= 1;
				if (!moving_forward) return ResolveState("DriftEnd");
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire("Drift");
			Goto DriftEnd;
		DriftEnd:
			TNT1 A 0 A_StopSound(5);
			TNT1 A 0 A_Light(0);
			Goto Ready;
		SpinCharge:
			TNT1 A 1 {
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				int obuttons = GetPlayerInput(MODINPUT_OLDBUTTONS);
				int maxSpinCharges = 70;
				player.crouching = 1;
				SetHeight(22);
				A_Light(3);
				A_Stop();
                cvar.FindCvar("IsSpinDashing").SetBool(true);
				A_OverlayFlags(9, PSPF_ADDWeapon, true);
				if (CountInv("PowerHyper")) {
					A_Overlay(9, "HyperSpinAnim", true);
				}
                else if (CountInv("PowerSuper")) {
					A_Overlay(9, "SuperSpinAnim", true);
				}
                else {
					A_Overlay(9, "SpinAnim", true);
				}
				if (invoker.SpinCharges > maxSpinCharges) { invoker.SpinCharges = maxSpinCharges; }
				if (invoker.SpinCharges < 1 || invoker.SpinCharges % invoker.ShweeDelay == 0 && invoker.SpinCharges < maxSpinCharges) {
					A_StartSound("sWeapons/peelout", 5);
				}
				invoker.SpinCharges++;
				if (!(buttons & BT_ATTACK) || !A_CheckFloor("Null") || (buttons & BT_JUMP && !(obuttons & BT_JUMP))) {
					if (buttons & BT_JUMP) A_ChangeVelocity(0, 0, 15, CVF_Replace);
					SetHeight(42);
					A_ClearOverlays(0, 0);
					A_Light(0);
					cvar.FindCvar("IsSpinDashing").SetBool(false);
					return ResolveState("Ready");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_SetSpeed(0.1);
			TNT1 A 1 A_ReFire("SpinCharge");
			TNT1 A 0 {
				A_ClearOverlays(0, 0);
				A_Light(0);
				A_SetSpeed(4);
				SetHeight(22);
				if (invoker.SpinCharges < 30) invoker.SpinCharges = 30;
				A_StartSound("sWeapons/peeloutrelease", 5);
			}
            Goto SpinDash;
		DropCharge:
			TNT1 A 1 {
				A_OverlayFlags(9, PSPF_ADDWeapon, true);
				if (invoker.SpinCharges >= 10) {
					A_Light(3);
					if (CountInv("PowerHyper")) {
						A_Overlay(9, "HyperSpinAnim", true);
					}
					else if (CountInv("PowerSuper")) {
						A_Overlay(9, "SuperSpinAnim", true);
					}
					else {
						A_Overlay(9, "SpinAnim", true);
					}
				}
				if (invoker.SpinCharges > 30) { invoker.SpinCharges = 30; }
				if (invoker.SpinCharges == 10) {
					A_StartSound("sWeapons/dropdash", 5);
				}
				invoker.SpinCharges++;
                if (player.onground) {
                    A_ClearOverlays(0, 0);
                    A_Light(0);
                    if (invoker.SpinCharges >= 10) {
						A_SetSpeed(4);
						SetHeight(22);
						if (CountInv("PowerSuper")||CountInv("PowerHyper")) {
							A_StartSound("sWeapons/superdropdash", 5);
							A_QuakeEx(3, 3, 3, 30, 800, 100, "", QF_SCALEDOWN);
						}
						else {
							A_StartSound("sWeapons/peeloutrelease", 5);
						}
						invoker.SpinCharges += 10;
						return ResolveState("SpinDash");
					}
					else {
						return ResolveState("Ready");
					}
                }
                return ResolveState(null);
			}
			TNT1 A 0 A_SetSpeed(0.1);
			TNT1 A 1 A_ReFire("DropCharge");
			TNT1 A 0 {
                A_ClearOverlays(0, 0);
				A_Light(0);
				cvar.FindCvar("IsSpinDashing").SetBool(false);
                invoker.SpinCharges = 0;
				return ResolveState(null);
			}
            Goto Ready;
		WallCharge:
			TNT1 A 1 {
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				int obuttons = GetPlayerInput(MODINPUT_OLDBUTTONS);
				bool isTouchingWall = A_CheckLOF("Null", CLOFF_JUMP_ON_MISS|CLOFF_SKIPENEMY|CLOFF_SKIPFRIEND|CLOFF_SKIPOBJECT|CLOFF_MUSTBESOLID|CLOFF_ALLOWNULL|CLOFF_NOAIM_VERT, 32);
				invoker.DidWallDash = true;
				int maxSpinCharges = 50;
				player.crouching = 1;
				A_Light(3);
				A_Stop();
				A_OverlayFlags(9, PSPF_ADDWeapon, true);
				if (CountInv("PowerHyper")) {
					A_Overlay(9, "HyperSpinAnim", true);
				}
                else if (CountInv("PowerSuper")) {
					A_Overlay(9, "SuperSpinAnim", true);
				}
                else {
					A_Overlay(9, "SpinAnim", true);
				}
				if (invoker.SpinCharges > maxSpinCharges) { invoker.SpinCharges = maxSpinCharges; }
				if (invoker.SpinCharges < 1 || invoker.SpinCharges % invoker.ShweeDelay == 0 && invoker.SpinCharges < maxSpinCharges) {
					A_StartSound("sWeapons/peelout", 5);
				}
				invoker.SpinCharges++;
				if (!(buttons & BT_ATTACK) || !isTouchingWall || (buttons & BT_JUMP && !(obuttons & BT_JUMP))) {
					if (buttons & BT_JUMP) {
						A_StartSound("*jump");
						invoker.DidWallDash = false;
						A_ChangeVelocity(-10, 0, 15, CVF_Relative);
					}
					A_ClearOverlays(0, 0);
					A_Light(0);
					return ResolveState("Ready");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_SetSpeed(0.1);
			TNT1 A 1 A_ReFire("WallCharge");
			TNT1 A 0 {
				A_ClearOverlays(0, 0);
				A_Light(0);
				A_SetSpeed(4);
				if (invoker.SpinCharges < 20) invoker.SpinCharges = 20;
				A_StartSound("sWeapons/peeloutrelease", 5);
			}
            Goto WallDash;
		SpinDash:
			TNT1 A 1 {
				SetHeight(22);
                cvar.FindCvar("IsSpinDashing").SetBool(true);
				A_ChangeVelocity(invoker.SpinCharges * 2.2, 0, Vel.Z, CVF_Relative|CVF_Replace);
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP && A_CheckFloor("Null")) {
					A_ChangeVelocity(0, 0, invoker.SpinCharges / 7);
				}
				int speed = sqrt(Vel.X ** 2 + Vel.Y ** 2);
				double spin_dash_damage = invoker.SpinCharges;
				double spin_dash_range = speed + 128;
				for (int x = 0; x <= 120; x++) {
					FTranslatedLineTarget t;
					int rx = random(-30, 30);
					int ry = random(-30, 30);
					double pitch = AimLineAttack(angle + rx, spin_dash_range, null, 0., ALF_CHECK3D);
					LineAttack(angle + rx, spin_dash_range, pitch + ry, spin_dash_damage / 14, 'SpinDash', "InvisiblePuff", LAF_ISMELEEATTACK, t);
					if (t.linetarget) A_StartSound("sweapons/finalhit", CHAN_WEAPON);
				}
				return ResolveState(null);
			}
			TNT1 A 0 {
				SetHeight(42);
                cvar.FindCvar("IsSpinDashing").SetBool(false);
				if (GetPlayerInput(INPUT_BUTTONS) & BT_CROUCH) {
					return ResolveState(null);
				}
				int speed = sqrt(Vel.X ** 2 + Vel.Y ** 2);
				if (invoker.SpinCharges / 2 && A_CheckFloor("Null") && speed > 20) {
					if (GetPlayerInput(MODINPUT_FORWARDMOVE) < 0) {
						invoker.SpinCharges -= 2;
					}
					else {
						invoker.SpinCharges--;
					}
					return ResolveState("SpinDash");
				}
				invoker.SpinCharges = 0;
				return ResolveState(null);
			}
			Goto Ready;
		WallDash:
			TNT1 A 1 A_ChangeVelocity(0, 0, invoker.SpinCharges - (invoker.SpinCharges / 3), CVF_Replace);
			Goto Ready;
		Hover:
			TNT1 A 1 {
				int buttons = GetPlayerInput(MODINPUT_BUTTONS);
				if (buttons & BT_JUMP) A_ChangeVelocity(Vel.X, Vel.Y, 15, CVF_Replace);
				else if (buttons & BT_CROUCH) A_ChangeVelocity(Vel.X, Vel.Y, -15, CVF_Replace);
				else A_ChangeVelocity(Vel.X, Vel.Y, 0, CVF_Replace);
				A_SetGravity(0);
				invoker.HoverCounter++;
				if (invoker.HoverCounter > 75 && CountInv("PowerSuper")) {
					return A_Jump(256, "HoverEnd");
				}
				A_Gravity();
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire("Hover");
			Goto Ready;
		HoverEnd:
			TNT1 A 0 A_SetGravity(1);
			Goto Ready;
		Restoration:
			TNT1 A 1 {
				int ringLimit = 150;
				int delay = 14;
				invoker.HealingCounter++;
				DamageFactor = 2;
				A_SetMugshotState("Healing");
				A_Stop();
				if (invoker.HealingCounter < delay) {
					 invoker.HealingCounter = delay;
				}
				if (invoker.HealingCounter % delay == 0) {
					 A_StartSound("classic/healing", 13);
				}
				if ((Health < ringLimit) && invoker.HealingCounter % 2 == 0) {
					A_GiveInventory("Health", 1);
					if (Health > ringLimit) { A_SetHealth(ringLimit); }
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			/* passthrough */
		EndHeal:
			TNT1 A 0 {
				invoker.HealingCounter = 0;
				DamageFactor = 1;
			}
			Goto Ready;
		SpinAnim:
			SPIN ABCDEFEDCB 1;
			Loop;
		SuperSpinAnim:
			SSPN ABCDEFEDCB 1;
			Loop;
		HyperSpinAnim:
			HSPN ABCDEFEDCB 1;
			Loop;
	}
}

class SpeedforcePistol : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.Kickback 9999999;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoGive 30;
		Weapon.AmmoUse1 2;
		Weapon.AmmoUse2 8;
		AttackSound "weapons/rbeam";
		Inventory.PickupMessage "Speedforce Railgun";
		Tag "Speedforce Railgun";
		+WEAPON.AMMO_OPTIONAL
	}
    action state WeaponReadyJustPressed(int key_press, statelabel state_to_switch)
    {
        A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
        int c_buttons = GetPlayerInput(MODINPUT_BUTTONS);
        int o_buttons = GetPlayerInput(MODINPUT_OLDBUTTONS);
        if (c_buttons & key_press && !(o_buttons & key_press)) {
            return ResolveState(state_to_switch);
        }
        return ResolveState(null);
    }
	States
	{
		Ready:
			SPFR A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			SPFR A 1 A_Raise(20);
			Loop;
		Fire:
			SPFR A 0 A_JumpIf(CountInv("ChaosEnergy") < 1, "WeakShot");
			SPFR A 0 A_JumpIf(CountInv("ChaosEnergy") > 0, "Shoot");
		Shoot:
			SPFR A 1 Bright {
				A_RailAttack(80, 0, 1, "00 b8 ff", "00 2b ff", 0, 0, "none", 0, 0, 0, 25, 1.0, 1.0);
                A_ChangeVelocity(Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
			}
			SPFR AAAAA 1 A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
            SPFR BCDDDDDDDDDCBA 1 WeaponReadyJustPressed(BT_ATTACK, "Fire");
			Goto Ready;
		WeakShot:
			SPFR A 1 A_RailAttack(1, 0, 1, "45 45 45", "45 45 45", 0, 0, "none", 0, 0, 0, 10, 0.5, 0.5);
			SPFR AAAAA 1 A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
            SPFR BCDDDDDDDDDCBA 1 WeaponReadyJustPressed(BT_ATTACK, "Fire");
			Goto Ready;
		AltFire:
			SPFR A 1 Bright {
				A_RailAttack(160, 0, 1, "ff 00 00", "ff b4 00", 0, 0, "none", 0, 0, 0, 50, 2.0, 1.5);
				A_ChangeVelocity(Cos(Pitch) * -20, 0, Sin(Pitch) * 20, CVF_Relative);
			}
			SPFR AAAAAAAA 1 A_WeaponReady(WRF_NOFIRE|WRF_NOBOB);
            SPFR BCDDDDDDDDDDDDDDCBA 1 WeaponReadyJustPressed(BT_ALTATTACK, "AltFire");
			Goto Ready;
		FailCharge:
			TNT1 A 0 A_PlaySound("sglobal/error");
			Goto Ready;
		Spawn:
			SPER A -1;
			Stop;
	}
}

class SpeedyShotgun : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse1 6;
		Weapon.AmmoUse2 4;
		Weapon.AmmoGive 32;
		Weapon.KickBack 500;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		AttackSound "Weapons/shotgf";
		Tag "Speedy Shotgun";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "You got the Speedy Shotgun!";
	}
	States
	{
		Ready:
			SHTG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			SHTG A 1 A_Raise(20);
			Loop;
		Fire:
			SHTG A 4
			{
				A_FireBullets(5.6, 0, 7, 4, "BulletPuff");
				A_StartSound("Weapons/shotgf", 1);
				if (CountInv("PowerHyper") > 0) {
					A_GunFlash("HyperFlash");
				} else {
					A_GunFlash();
				}
				if (CountInv("PowerHyper") > 0) { A_ReFire(); }
			}
			Goto Ready;
		AltFire:
			SHTG AAAAA 2
			{
				A_ChangeVelocity(Cos(Pitch) * -5, 0, Sin(Pitch) * 5, CVF_Relative);
				A_FireBullets(6, 6, 6, 9, "BulletPuff");
				A_GunFlash("QuickFlash");
			}
			SHTG A 1 A_GunFlash();
			SHTG AAAAAABBBBBCCCCCDDDDCCCCCBBBBBAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_ReFire();
			Goto Ready;
		Flash:
			SHTF A 2 Bright A_Light1;
			SHTF B 2 Bright A_Light2;
			Goto LightDone;
		QuickFlash:
			SHTF A 1 Bright A_Light1;
			SHTF B 1 Bright A_Light2;
			Goto LightDone;
		Spawn:
			SHOT A -1;
			Stop;
	}
}


class ChaosRain : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 700;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 20;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Chaos Rain";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "You got the Chaos Rain!";
	}
	States
	{
		Ready:
			CHGG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			CHGG A 1 A_Raise(20);
			Loop;
		Fire:
			CHGG A 1
			{
				if (CountInv("PowerSuper") > 0) {
					A_StartSound("Weapons/shotgf", 1);
					A_GunFlash();
					A_FireBullets(14, 12, 5, 10, "BulletPuff");
				}
				else if (CountInv("PowerHyper") > 0) {
					A_StartSound("Weapons/shotgf", 1);
					A_GunFlash();
					A_FireBullets(16, 14, 15, 10, "BulletPuff");
				}
				else {
					A_StartSound("Weapons/chngun", 1);
					A_GunFlash();
					A_FireBullets(12, 10, 1, 10, "BulletPuff");
				}
			}
			CHGG B 1
			{
				if (CountInv("PowerSuper") > 0) {
					A_StartSound("Weapons/shotgf", CHAN_Weapon);
					A_GunFlash();
					A_FireBullets(14, 12, 5, 10, "BulletPuff");
				}
				else if (CountInv("PowerHyper") > 0) {
					A_StartSound("Weapons/shotgf", CHAN_Weapon);
					A_GunFlash();
					A_FireBullets(16, 14, 15, 10, "BulletPuff");
				}

				else {
					A_StartSound("Weapons/chngun", CHAN_Weapon);
					A_GunFlash();
					A_FireBullets(12, 10, 1, 10, "BulletPuff");
				}
			}
			CHGG B 0 A_ReFire();
			Goto Ready;
		Spawn:
			MGUN A -1;
			Stop;
	}
}

class ChaosBlaster : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.AmmoUse 1;
		Weapon.KickBack 100;
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Chaos Blaster";
		Inventory.PickupMessage "You got the Chaos Blaster!";
	}
	States
	{
		Ready:
			PLSG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			PLSG A 1 A_Raise(20);
			Loop;
		Fire:
			PLSG A 1 A_FireProjectile("MinorChaosEnergyBall");
			Goto Ready;
		Flash:
			PLSF A 4 Bright A_Light1;
			Goto LightDone;
			PLSF B 4 Bright A_Light1;
			Goto LightDone;
		Spawn:
			PLAS A -1;
			Stop;
	}
}

class ClassicRocketStream : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 2500;
		Weapon.AmmoUse 15;
		Weapon.AmmoGive 45;
		Weapon.AmmoType "ChaosEnergy";
		Tag "Rocket Stream";
		Weapon.BobSpeed 1.5;
		Weapon.BobRangeX 0.5;
		Inventory.PickupMessage "You got the Rocket Stream!";
	}
	States
	{
		Ready:
			MISG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			MISG A 1 A_Raise(20);
			Loop;
		Fire:
			MISG B 1 A_GunFlash();
			MISG A 1 A_FireProjectile("StreamRocket");
			Goto Ready;
		Flash:
			MISF A 3 Bright A_Light1;
			MISF B 4 Bright;
			MISF CD 4 Bright A_Light2;
			Goto LightDone;
		Spawn:
			LAUN A -1;
			Stop;
	}
}

class SpinAttack : CustomInventory
{
	int inuse;
	action void SetHeight(int height)
	{
		A_SetSize(-1, height);
		Player.ViewHeight = height;
	}
	action void DoubleSpin(int spread_x, int spread_y, int distance, int damage)
	{
		A_Light(0);
        int tracer_count = 15;
        damage = clamp(damage, 1, damage / tracer_count);
		for (int x = 0; x <= tracer_count; x++) {
			FTranslatedLineTarget t;
			int rx = random(-spread_x, spread_x);
			int ry = random(-spread_y, spread_y);
			double pitch = AimLineAttack(angle + rx, distance, null, 0., ALF_CHECK3D);
			LineAttack(angle + rx, distance, pitch + ry, damage * random(1, 8), 'Melee', "SonicPunchPuff", LAF_ISMELEEATTACK, t);
			A_GiveInventory("SwordParry");
			if (t.linetarget) A_StartSound("sweapons/finalhit", CHAN_WEAPON);
		}
	}
	States
	{
		Use:
			TNT1 A 0 A_Overlay(-2, "StartAttack");
			TNT1 A 0 A_OverlayOffset(-2, 0, 32);
			Fail;
		StartAttack:
			TNT1 A 0 {
				A_StartSound("sweapons/instashield", 8);
                A_AlertMonsters();
				A_GiveInventory("InstaShield");
				A_Light(3);
				A_OverlayOffset(9, 0, 128);
				if (CountInv("PowerHyper")) {
					return ResolveState("HyperAttack");
				}
				else if (CountInv("PowerSuper")) {
					return ResolveState("SuperAttack");
				}
				else {
					return ResolveState("Attack");
				}
				return ResolveState(null);
			}
			Stop;
		Attack:
			SPIN A 1 DoubleSpin(5, 5, 256, 32);
			SPIN BCDEFEDCB 1;
			Stop;
		SuperAttack:
			SSPN A 1 DoubleSpin(15, 15, 256, 64);
			SSPN BCDEFEDCB 1;
			Stop;
		HyperAttack:
			HSPN A 1 DoubleSpin(15, 15, 256, 128);
			HSPN BCDEFEDCB 1;
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 10;
		}
	}
}

class SonicThok : CustomInventory
{
	int inuse;
	int counter;
	bool didJump;
	override void Tick()
	{
		if (owner.A_CheckFloor("Null")) {
			counter = 0;
		}
		Super.Tick();
	}
	action void DoSonicThok(int thok_speed)
	{
		int forward_input = GetPlayerInput(MODINPUT_FORWARDMOVE);
		int side_input = GetPlayerInput(MODINPUT_SIDEMOVE);

		int x_velocity_change = 0;
		int y_velocity_change = 0;

		if (forward_input < 0) {
			x_velocity_change = -thok_speed;
		}
		else if (forward_input > 0) {
			x_velocity_change = thok_speed;
		}

		if (side_input < 0) {
			y_velocity_change = thok_speed;
		}
		else if (side_input > 0) {
			y_velocity_change = -thok_speed;
		}

		if (x_velocity_change == 0 && y_velocity_change == 0) {
			x_velocity_change = thok_speed;
		}

		A_ChangeVelocity(x_velocity_change, y_velocity_change, 0, CVF_Relative);
	}
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "CountCheck");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	CountCheck:
		TNT1 A 0 {
			invoker.counter++;
			return A_JumpIf((invoker.counter <= 1 || CountInv("PowerSuper") || CountInv("PowerHyper")), "Thok");
		}
		Stop;
	Thok:
		TNT1 A 1
		{
			int speed = sqrt(Vel.X * Vel.X + Vel.Y * Vel.Y);
			int thokSpeed = speed / 2 + 50;
			A_StartSound("classic/dash", 6);
			DoSonicThok(thokSpeed);
			return ResolveState(null);
		}
		Stop;
	Boost:
		/* Unused */
		TNT1 A 0 {
			A_AlertMonsters();
			A_StartSound("sweapons/boost", 6);
			A_StartSound("classic/go", 8);
		}
		TNT1 A 0 A_JumpIf(CountInv("PowerHyper"), "HyperBoost");
		BOOS B 15 Bright {
			A_Light(10);
			A_FireBullets(25, 25, 100, 200, "SonicDashPuff", FBF_NOPITCH);
			A_TakeInventory("ChaosEnergy", 25);
			A_ChangeVelocity(200, 0, 0, CVF_Relative|CVF_Replace);
		}
		TNT1 A 0 { A_Light(0); }
		Stop;
	HyperBoost:
		BOOS C 15 Bright {
			A_Light(10);
			A_FireBullets(50, 50, 200, 200, "SonicDashPuff", FBF_NOPITCH);
			A_ChangeVelocity(400, 0, 0, CVF_Relative|CVF_Replace);
		}
		TNT1 A 0 { A_Light(0); }
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		int buttons = owner.GetPlayerInput(MODINPUT_BUTTONS);
		int obuttons = owner.GetPlayerInput(MODINPUT_OLDBUTTONS);
		bool JumpPress = (buttons & BT_JUMP && !(obuttons & BT_JUMP)) && !owner.CountInv("PowerHyper");
		bool OffAbilityPress = buttons & (BT_ZOOM|BT_SPEED) && !(obuttons & (BT_ZOOM|BT_SPEED));
		bool IsTouchingWall = cvar.FindCvar("CanWallJump").GetBool();
		bool AboveGround = !owner.player.onground && owner.Pos.Z - owner.GetZAt() > 38;
		bool IsHovering = buttons & BT_ALTATTACK && (owner.CountInv("PowerSuper")||owner.CountInv("PowerHyper")) && !owner.player.onground;
		if (inuse > 0) {
			inuse--;
		}
        if (!IsTouchingWall) {
            if (owner is "PlayerPawn" && OffAbilityPress && inuse == 0) {
                owner.UseInventory(self);
                didJump = false;
                inuse = 30;
            }
            else if (owner is "PlayerPawn" && JumpPress && AboveGround && owner.GetCvar("DidJump") && !IsHovering && inuse == 0) {
                owner.UseInventory(self);
                didJump = true;
                inuse = 5;
            }
        }
	}
}
