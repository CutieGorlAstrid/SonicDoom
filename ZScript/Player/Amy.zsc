class AmyPlayer : LockLoadPlayer
{
	Default
	{
		Player.DisplayName "$amy";
		Player.Face "AMF";
		Player.SoundClass "amy";
		Player.StartItem "PikoPikoHammer";
		Player.StartItem "SilentRosePistol";
		Player.StartItem "AmyCheck";
		Player.StartItem "AmyKick";
		Player.StartItem "AmySlide";
		Player.StartItem "SlamAtkObject";
		Player.StartItem "ChaosEnergy", 150;
		Player.WeaponSlot 1, "PikoPikoHammer";
		Player.WeaponSlot 2, "SilentRosePistol";
		Player.WeaponSlot 3, "PrecisionShotgun";
		Player.WeaponSlot 4, "RailshotCannon";
		Player.WeaponSlot 5, "AmyEclipseBlaster";
		Player.WeaponSlot 6, "RapidMissiles";
	}
	override void Tick()
	{
		if (!CountInv("PowerSuper") && CountInv("PowerBlocking")) {
			A_SetMugshotState("Shield");
		}
		Super.Tick();
	}
	action void FireParryProjectile(double velocity, double angle, double pitch)
	{
		Actor projectile = SpawnPlayerMissile("ParryProjectile", angle);
		projectile.Height = self.Height;
		projectile.Pitch = pitch;
		projectile.A_ScaleVelocity(velocity);
	}
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod)
	{
		if (CountInv("PowerBlocking")) {
			ACS_NamedExecute("ParryEffect");
			if (inflictor is "Actor" && inflictor != null) {
				if (inflictor.bMissile) {
					FireParryProjectile(inflictor.speed + damage, angle + random(-2, 2), pitch + random(-2, 2));
				}
				if (Health < 100 && damage / 2) A_GiveInventory("Health", damage / 2);
				source.DamageMobj(self, self, damage * 2, "Parry");
				let oldangle = source.angle;
				source.A_SetAngle(angle);
				source.A_Recoil(-damage * 2);
				source.A_SetAngle(oldangle);
				A_GiveInventory("HammerBlock");
				let style = StyleSystem(EventHandler.Find("StyleSystem"));
				if (style) {
                    if (inflictor.bMissile) {
                        style.DeflectBonus(Health, damage);
                    }
                    else {
                        style.ParryBonus(Health, damage);
                    }
                }
			}
			if (damage / 4) A_TakeInventory("ChaosEnergy", damage / 4);
		}
		return Super.DamageMobj(inflictor, source, damage, mod);
	}
	States
	{
		Pain:
			TNT1 A 0 {
				if (!CountInv("PowerBlocking")) {
					A_PlaySound("sglobal/loserings", 6);
					A_PlaySound("amy/pain", 7);
				}
			}
			PLAY G 4;
			PLAY G 4;
			Goto Spawn;
		Death:
			TNT1 A 0 A_PlaySound("amy/scream");
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY H 10;
			PLAY I 10;
			PLAY J 10 A_NoBlocking;
			PLAY KLM 10;
			PLAY N -1;
			Stop;
		XDeath:
			TNT1 A 0 A_Log("OH NO");
			TNT1 A 0 A_PlaySound("amy/ohno");
			TNT1 A 0 ACS_NamedExecute("DeathMusic", 0, 0);
			PLAY O 5;
			PLAY P 5;
			PLAY Q 5 A_NoBlocking;
			PLAY RSTUV 5;
			PLAY W -1;
			Stop;
	}
}

class PikoPikoHammer : LockLoadWeapon
{
	bool GuardCheck;
	bool HJumpCheck;
	bool DidTarget;
	Default
	{
		Weapon.SelectionOrder 1;
		Weapon.Kickback 1000000;
		Tag "Piko Piko Hammer";
		+WEAPON.MELEEWEAPON
		+WEAPON.NOALERT
		+WEAPON.NOAUTOFIRE
	}
	action bool HomeInOnTarget()
	{
		invoker.DidTarget = false;
		FTranslatedLineTarget ltinfo;
		bool ltattack = LineAttack(angle, 896, pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 0);
		let ltarget = ltinfo.linetarget;
		if (ltarget && Distance3D(ltarget) > 128 && health > 0) {
			target = ltarget;
			invoker.DidTarget = true;
			A_Stop();
			double ltdistance = Distance2D(ltarget);
			A_SetAngle(ltinfo.angleFromSource);
			A_StartSound("classic/dash", 6);
			Vel = (ltarget.Pos - Pos) / 4;
			cvar.FindCvar("DidHoming").SetBool(true);
			return true;
		}
		cvar.FindCvar("DidHoming").SetBool(false);
		return false;
	}
	action void DoRemoteAttack(int damage, Name damage_type)
	{
		A_StartSound("sweapons/finalhit", CHAN_WEAPON);
		if (target) {
			target.DamageMobj(self, null, damage, damage_type);
		}
	}
	action bool DoHammerJump(int thrust)
	{
		if (player.onground && (GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) || (GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_JUMP)) {
			A_ChangeVelocity(Vel.X, Vel.Y, thrust, CVF_Replace);
			invoker.HJumpCheck = true;
			return true;
		}
		return false;
	}
	action void DoHammerDash(int strength)
	{
		if (!HomeInOnTarget()) {
			int velocity = sqrt(Vel.X ** 2 + Vel.Y ** 2) / 2;
			A_ChangeVelocity(Cos(Pitch) * 6 + velocity, 0, Sin(Pitch) * -10, CVF_Relative);
		}
	}
	States
	{
		Ready:
			PIKO A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			PIKO A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(Pos.Z - GetZAt() > 64, "HammerAerial");
			PIKO AIHHHH 1;
			/* passthrough */
		HammerAttack:
			PIKO H 1;
			TNT1 A 0 A_ReFire("HammerAttack");
			PIKO IB 1;
			PIKO C 1 {
				A_PlaySound("sweapons/hammerswing", 1);
				/* Self-damage */
				if (CountInv("LegOut")) {
					A_PlaySound("sweapons/hammerbonk");
					if (!CountInv("PowerSuper")) A_DamageSelf(5);
				}
				if (random(1,8) == 8) {
					/* Bonk */
					A_CustomPunch(500, 0, CPF_PULLIN, "PikoPuff", 95, 0, 0, "ArmorBonus", "sweapons/hammerbonk");
				}
				else {
					/* Standard attack */
					A_CustomPunch(250, 0, 0, "PikoPuff", 95, 0, 0, "ArmorBonus", "sweapons/finalhit");
				}
				cvar.FindCvar("CanHammerJump").SetBool(true);
			}
			PIKO D 1 {
				int thrust = 30;
				if (CountInv("PowerSuper")) thrust = 40;
				if (DoHammerJump(thrust)) return ResolveState("HammerJumpSpin");
				return ResolveState(null);
			}
			PIKO E 8 { cvar.FindCvar("CanHammerJump").SetBool(false); }
			Goto EndAnim;
		HammerAerial:
			PIKO A 1;
			TNT1 A 0 A_PlaySound("sweapons/hammerswing", 1);
			PIKO B 1 DoHammerDash(10);
			PIKO C 1 A_CustomPunch(80, 0, 0, "PikoPuff", 120, 0, 0, "ArmorBonus", "sweapons/finalhit");
			PIKO D 1 {
				if (invoker.DidTarget) {
					DoRemoteAttack(80, "Piko");
					A_ScaleVelocity(0.45);
				}
			}
			PIKO EFZZZ 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
                cvar.FindCvar("DidHoming").SetBool(false);
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ALTATTACK && (!(GetPlayerInput(MODINPUT_OLDBUTTONS) & BT_ALTATTACK))) {
					return ResolveState("AltFire");
				}
				return ResolveState(null);
			}
			PIKO GHIJ 1;
			Goto Ready;
		EndAnim:
			PIKO DCB 1 { invoker.HJumpCheck = false; }
			Goto Ready;
		AltFire:
			TNT1 A 0 {
				if (CountInv("ChaosEnergy")) {
					A_GiveInventory("HammerBlock");
					A_PlaySound("sweapons/blockready", 6);
				}
				else {
					DamageFactor = 0;
				}
				A_PlaySound("sweapons/swordswing", 1);
			}
			PIKO JIHGFEDCBA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			PIKO A 10 { DamageFactor = 1.3; }
			Goto Ready;
		HammerJumpSpin:
			PIKO A 0 { cvar.FindCvar("CanHammerJump").SetBool(false); }
			PIKO DEFZZZGHIJABCDEFZZZGHIJ 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("AmyKick");
			Goto Ready;
		Spawn:
			PKPK A -1;
			Stop;
	}
}

class SilentRosePistol : LockLoadWeapon
{
	int ShotsFired;
	Default
	{
		Weapon.SelectionOrder 100;
		Weapon.Kickback 0;
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoUse 5;
		Weapon.AmmoGive 90;
		AttackSound "sweapons/apistol";
		Inventory.PickupMessage "Silent Rose";
		Inventory.PickupSound "spickup/amy";
		Tag "Silent Rose";
		+WEAPON.NOALERT
	}
	States
	{
		Ready:
			RSFP A 1 A_WeaponReady();
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			RSFP A 1 A_Raise(20);
			Loop;
		Fire:
			RSFP A 0 { invoker.ShotsFired++; }
			RSFP B 1 A_FireBullets(0, 0, 3, 10, "NoGibPuff", FBF_USEAMMO|FBF_NORANDOM);
			RSFP CBA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			RSFP A 0 A_JumpIf(invoker.ShotsFired >= 12, "Reloading");
			RSFP AAAAAAAA 1 {
				A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
				if (GetPlayerInput(INPUT_BUTTONS) & BT_ATTACK && !(GetPlayerInput(INPUT_OLDBUTTONS) & BT_ATTACK)) {
					return ResolveState("Fire");
				}
				return ResolveState(null);
			}
			Goto Ready;
		Reloading:
			RSFP A 0 A_StartSound("sweapons/areload", CHAN_WEAPON);
            RSFP A 0 { invoker.ShotsFired = 0; }
			RSFP DEFGH 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			RSFP IIIIIIIIIIIIIIIIIIIIIIII 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			RSFP HGFED 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		AltFire:
			RSFP A 0 A_JumpIf(invoker.ShotsFired >= 1, "Reloading");
			Goto Ready;
		Spawn:
			ROSP A -1;
			Stop;
	}
}

class PrecisionShotgun : LockLoadWeapon
{
	bool isZoomed;
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoUse1 15;
		Weapon.AmmoGive 30;
		Weapon.KickBack 160;
		Inventory.PickupMessage "Precision Shotgun";
		Tag "Precision Shotgun";
		+WEAPON.NOALERT
        +WEAPON.NOAUTOFIRE
	}
	States
	{
		Ready:
			AMSG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			TNT1 A 0 {
				A_ZoomFactor(1);
				A_SetCrosshair(0);
				invoker.isZoomed = false;
			}
			TNT1 A 0 {
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) {
					return ResolveState("Fire");
				}
				return ResolveState(null);
			}
			Loop;
		Deselect:
			#### # 1 {
				A_Lower(20);
				A_ZoomFactor(1);
				A_SetCrosshair(0);
			}
			Loop;
		Select:
			AMSG A 1 A_Raise(20);
			Loop;
		Fire:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "SpeedFire");
			AMSG A 0 A_PlaySound("sweapons/speedyshot", 1);
			AMSG A 0 A_GunFlash();
			AMSG A 0 A_FireBullets(1, 1, 12, 10, "BulletPuff", FBF_USEAMMO);
			AMSG A 0 A_AlertMonsters(0);
			AMSG AAAAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_PlaySound("sweapons/amyreload1", 7);
			AMSG BBCCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_PlaySound("sweapons/amyreload2", 7);
			AMSG BB 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			AMSG AAAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			AMSG A 0 A_ReFire();
			Goto Ready;
		AltFire:
			AIMA A 1 {
				if (!invoker.isZoomed) {
					invoker.isZoomed = true;
					A_StartSound("sweapons/zoom", 1);
				}
				ACS_NamedExecute("HowManyZFireLeft");
				A_ZoomFactor(GetCvar("AmyZoomFactor"));
				A_SetSpeed(0.5);
				if ((GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) && (CountInv("ChaosEnergy") >= 120 || CountInv("PowerSuper"))) {
					return ResolveState("PreciseShot");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			TNT1 A 0 A_StartSound("sweapons/zoomend", 1);
			Goto Ready;
		PreciseShot:
			AIMA A 1
			{
				if (!CountInv("PowerSuper")) {
					A_TakeInventory("ChaosEnergy", 120);
				}
				A_FireBullets(0, 0, 50, 16, "NoGibPuff");
				A_StartSound("sweapons/zoomfire", 1);
			}
			AIMA AAAAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		SpeedFire:
			AMSG A 0 A_PlaySound("sweapons/speedyshot", 1);
			AMSG A 0 A_GunFlash();
			AMSG A 0 A_FireBullets(2, 0, 20, 8, "BulletPuff", 0);
			AMSG A 0 A_AlertMonsters(0);
			AMSG AAAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_PlaySound("sweapons/amyreload1", 1);
			AMSG BBCCCCC 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			TNT1 A 0 A_PlaySound("sweapons/amyreload2", 1);
			AMSG BBAAAAA 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			AMSG A 0 A_ReFire();
			Goto Ready;
		NoShot:
			AMSG A 0 A_PlaySound("sglobal/error");
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("AmyKick");
			Goto Ready;
		Flash:
			AMGF A 2 Bright A_Light2;
			AMGF A 1 Bright A_Light1;
			Goto LightDone;
		Spawn:
			AMYG A -1;
			Stop;
	}
}

class RailshotCannon : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1800;
		Weapon.AmmoType "ChaosEnergy";
		Weapon.AmmoUse1 250;
		Weapon.AmmoGive 500;
		Weapon.KickBack 0;
		Inventory.PickupMessage "Railshot Cannon";
		Tag "Railshot Cannon";
		AttackSound "sweapons/amyrailgunfire";
	}
	States
	{
		Spawn:
			STPP A -1;
			Loop;
		Ready:
			STPO AABBCC 1 Bright A_WeaponReady();
			Loop;
		Deselect:
			STPO E 1 A_Lower(20);
			Loop;
		Select:
			STPO E 1 A_Raise(20);
			Loop;
		Fire:
			STPO F 0 Bright A_GunFlash();
			STPO F 3 Bright {
				A_RailAttack(1200, 0, 1, "E903FF", "FF0771", RGF_FULLBRIGHT, 0, "GibPuff", 0, 0, 0, 60, 0.5, 2.0);
				A_Quake(6, 25, 0, 420, "");
				A_ChangeVelocity(Cos(Pitch) * -30, 0, Sin(Pitch) * 30, CVF_Relative);
			}
			TNT1 A 0 {
				A_ZoomFactor(1);
				A_WeaponReady(WRF_NOFIRE);
			}
			STPO GH 4 Bright;
			STPO EEEEEEEEEEEEEEEEEEEE 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			STPO D 6 A_StartSound("sweapons/amyrailgunreload");
			STPO A 4;
			Goto Ready;
		AltFire:
			STPO AABBCC 1 Bright {
				A_ZoomFactor(1.8);
				if (GetPlayerInput(MODINPUT_BUTTONS) & BT_ATTACK) {
					return ResolveState("Fire");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_ReFire();
			TNT1 A 0 A_ZoomFactor(1);
			Goto Ready;
		Flash:
			TNT1 A 1 A_Light1();
			TNT1 A 1 A_Light2();
			TNT1 A 1 A_Light1();
			TNT1 A 1 A_Light0();
			Stop;
	}
}

class AmyEclipseBlaster : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1400;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Weapon.AmmoUse 15;
		Weapon.AmmoGive 70;
		Weapon.KickBack 50;
		+EXTREMEDEATH
		+WEAPON.NOALERT
		Inventory.PickupMessage "Eclipse Blaster Mk. IV";
		Tag "Eclipse Blaster Mk. IV";
	}
	States
	{
		Ready:
			ACBL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			ACBL A 1 A_Raise(20);
			Loop;
		Fire:
			ACBL B 3
			{
				A_AlertMonsters();
				A_FireProjectile("ChaosEnergyBallAmy", 0, 1);
			}
			Goto Ready;
		AltFire:
			ECBL C 1 WeaponHealing(200);
			TNT1 A 0 A_ReFire();
			/* passthrough */
		EndHeal:
			ECBL DDDDDDDDDDDDDDD 1 A_WeaponReady(WRF_NOBOB|WRF_NOFIRE);
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("AmyKick");
			Goto Ready;
		Spawn:
			ACLI A -1;
			Stop;
  	}
}

class RapidMissiles : LockLoadWeapon
{
	Default
	{
		Weapon.SelectionOrder 1500;
		Weapon.AmmoUse1 20;
		Weapon.AmmoUse2 60;
		Weapon.AmmoGive 40;
		Weapon.AmmoType1 "ChaosEnergy";
		Weapon.AmmoType2 "ChaosEnergy";
		Inventory.PickupMessage "Rapid Missile Cannon";
		Tag "Rapid Missile Cannon";
		+WEAPON.NOAUTOAIM
	}
	States
	{
		Ready:
			MMSL A 1 A_WeaponReady(WRF_ALLOWRELOAD);
			Loop;
		Deselect:
			#### # 1 A_Lower(20);
			Loop;
		Select:
			MMSL A 1 A_Raise(20);
			Loop;
		Fire:
			MMSL B 2;
			TNT1 A 0 A_FireProjectile("ChaosMissile", 0, 1, 0, 5);
			MMSL A 2;
			MMSL B 0 A_ReFire();
			Goto Ready;
		AltFire:
			TNT1 A 0
			{
				A_FireProjectile("ChaosMissile", 0, 1, -8, 5);
				A_FireProjectile("ChaosMissile", 0, 0, 0, 5);
				A_FireProjectile("ChaosMissile", 0, 0, 8, 5);
			}
			MMSL B 8;
			MMSL A 8;
			MMSL B 0 A_ReFire();
			Goto Ready;
		Reload:
			TNT1 A 0 A_GiveInventory("AmyKick");
			Goto Ready;
		Spawn:
			MICR A -1;
			Stop;
	}
}

class AmyKick : CustomInventory
{
	int inuse;
	States
	{
	Use:
		TNT1 A 0 A_Overlay(-2, "KickAttack");
		TNT1 A 0 A_OverlayOffset(-2, 0, 32);
		Fail;
	KickAttack:
		AKIK A 1 A_PlaySound("sweapons/swordswing", 7);
		AKIK BC 1 A_GiveInventory("LegOut", 1);
		AKIK D 1 A_CustomPunch(10, false, CPF_NOTURN, "AmyKickPuff", 200, 0, 0, "ArmorBonus", "sweapons/finalhit");
		AKIK EFG 1;
		TNT1 A 0 A_TakeInventory("LegOut", 1);
		Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&BT_RELOAD && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&BT_RELOAD) && inuse == 0)
		{
			owner.UseInventory(self);
			inuse = 8;
		}
	}
}

class AmySlide : CustomInventory
{
	int inuse;
    action state CheckSlideCancel()
    {
        if (GetPlayerInput(MODINPUT_BUTTONS) & BT_JUMP) {
            A_ChangeVelocity(Vel.X * 1.35, Vel.Y * 1.35, Vel.Z * 1.2 + 5, CVF_Replace);
            return ResolveState("EndSlide");
        }
        else if (GetPlayerInput(MODINPUT_BUTTONS) & BT_CROUCH && player.onground) {
            return ResolveState("EndSlide");
        }
        else {
            A_ChangeVelocity(Vel.X, Vel.Y, 0, CVF_Replace);
        }
        return ResolveState(null);
    }
	States
	{
		Use:
			TNT1 A 0 A_Overlay(-2, "Slide");
			TNT1 A 0 A_OverlayOffset(-2, 0, 32);
			Fail;
		Slide:
			TNT1 A 0 {
				cvar.FindCvar("Sliding").SetBool(true);
				int forwardmax = 12800;
				int sidemax = 10240;
				int fspeed = 85;
				if (CountInv("PowerSuper")) fspeed = 90;
				int sspeed = (fspeed - 20) * -1;
				if (!(GetPlayerInput(MODINPUT_BUTTONS) & BT_RUN)) {
					forwardmax /= 2;
					sidemax /= 2;
				}
				int forward = GetPlayerInput(MODINPUT_FORWARDMOVE) / forwardmax;
				int sidem = GetPlayerInput(MODINPUT_SIDEMOVE) / sidemax;
				A_StartSound("amy/slide", 7);
				A_SetSize(-1, 18);
				Player.ViewHeight = 18;
				if (sidem > 0 || forward < 0 || sidem < 0) {
					A_ChangeVelocity(forward * fspeed, sidem * sspeed, 0, CVF_Relative|CVF_Replace);
				}
				else {
					A_ChangeVelocity(fspeed, 0, 0, CVF_Relative|CVF_Replace);
					return ResolveState("Animation");
				}
				return ResolveState(null);
			}
			TNT1 AAAAAAAAAAAAA 1 CheckSlideCancel();
			Goto EndSlide;
		Animation:
			SLID ABCDEEEEEEEEE 1 CheckSlideCancel();
			Goto EndSlide;
		EndSlide:
			#### DBCA 1 {
				cvar.FindCvar("Sliding").SetBool(false);
				A_SetSize(-1, 42);
				Player.ViewHeight = 42;
			}
			Stop;
	}
	override void DoEffect()
	{
		Super.DoEffect();
		if (inuse > 0)
		{
			inuse--;
		}
		if (owner is "PlayerPawn" && owner.GetPlayerInput(MODINPUT_BUTTONS)&(BT_ZOOM|BT_SPEED) && !(owner.GetPlayerInput(MODINPUT_OLDBUTTONS)&(BT_ZOOM|BT_SPEED)) && inuse == 0 && (owner.player.onground || owner.CountInv("PowerSuper")))
		{
			owner.UseInventory(self);
			inuse = 18;
		}
	}
}

