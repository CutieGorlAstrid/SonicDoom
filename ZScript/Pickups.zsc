class Ring : CustomInventory replaces HealthBonus // 2014
{
	Default
	{
		//$Category Lock & Load Pickups
		Radius 25;
		Height 10;
		Inventory.PickupMessage "$p_ring";
		Inventory.PickupSound "spickup/ring";
		+COUNTITEM
		+NOGRAVITY
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
		Spawn:
			RIN1 ABCDEFGHIJKLMNOP 1 Bright A_SetScale(1, 0.9);
			Loop;
		Pickup:
			TNT1 A 0
			{
				if (CountInv("AmyCheck") > 0) {
					if (CountInv("PowerSuper") > 0) { A_GiveInventory("ChaosEnergy", 1); }
					else { A_GiveInventory("Health", 1); }
				}
				else {
					A_GiveInventory("Health", 1);
				}
			}
			Stop;
	}
}

class DroppedRing : Ring
{
	int fadeCounter;
	int flashingThreshold;
	int maxFade;
	int pickupThreshold;
	property flashingThreshold: FlashingThreshold;
	property maxFade: MaxFade;
	property pickupThreshold: PickupThreshold;
	int isVisible;
	Default
	{
		-NOGRAVITY;
		+CANPASS;
		+BOUNCEONWALLS
		+BOUNCEONFLOORS
		+BOUNCEONCEILINGS
		DroppedRing.FlashingThreshold 30;
		DroppedRing.MaxFade 100;
	}
	override bool CanPickup(Actor toucher)
	{
		if (fadeCounter < pickupThreshold) {
			bAlwaysPickup = false;
			return false;
		}
		bAlwaysPickup = true;
		return super.CanPickup(toucher);
	}
	override void Tick()
	{
		Super.Tick();
		fadeCounter++;
		if (fadeCounter > flashingThreshold) {
			if (fadeCounter % 3 == 0) {
				if (!isVisible) {
					isVisible = true;
					A_SetTranslucent(1, 0);
				}
				else if (isVisible) {
					isVisible = false;
					A_SetTranslucent(0, 0);
				}
			}
		}
		if (fadeCounter > maxFade) {
			Thing_Remove(0);
		}
	}
}

class DroppedRingPlayer : DroppedRing
{
	Default
	{
		Inventory.PickupMessage "$p_lostring";
		DroppedRing.PickupThreshold 30;
		DroppedRing.MaxFade 50;
	}
}

class DroppedRingEnemy : DroppedRing
{
	Default
	{
		Inventory.PickupMessage "$p_ring";
		Inventory.Amount 2;
		DroppedRing.FlashingThreshold 10;
		DroppedRing.PickupThreshold 15;
		DroppedRing.MaxFade 35;
	}
}

class RingBox : Inventory replaces Stimpack // 2011
{
	Default
	{
		//$Category Lock & Load Pickups
		Health 1;
		Radius 30;
		Height 20;
		Inventory.PickupMessage "$p_ringbox";
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
		+SHOOTABLE
		+NOBLOOD
	}
	override bool TryPickup(in out Actor toucher)
	{
		A_Die();
		return true;
	}
	override int DamageMobj(Actor inflictor, Actor source, int damage, name mod, int flags, double angle)
	{
		Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		A_StartSound("spickup/boxdestroy", 2);
		int ringcount = 10;
		int maxrange  = damage / 4;
		if (maxrange < 5) {
			maxrange = 5;
		}
		for (int x = 1; x <= ringcount; x++) {
			int x = random(maxrange * -1, maxrange);
			int y = random(maxrange * -1, maxrange);
			A_SpawnItemEx("DroppedRing", 0, 0, 1, x, y, 10, 0, SXF_NOCHECKPOSITION);
		}
		return damage;
	}
	States
	{
		Spawn:
			RBOX A -1 Bright;
			Stop;
		Death:
			TNT1 A 0;
			Stop;
	}
}

class SpecialRing : Ring replaces Medikit // 2012
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "$p_specialring";
		Inventory.PickupSound "spickup/specialring";
		+COUNTITEM
		+NOGRAVITY
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
		Spawn:
			RIN2 ABCDEFGHIJKLMNOP 2 NoDelay Bright A_SetScale(2, 1.7);
			Loop;
		Pickup:
			TNT1 A 0
			{
				if (CountInv("AmyCheck") > 0)
				{
					if (CountInv("PowerSuper") > 0)
					{
						A_GiveInventory("ChaosEnergy", 50);
					}
					else
					{
						A_GiveInventory("ChaosEnergy", 50);
						if (Health < 300)
						{
							A_GiveInventory("Health", 50);
							if (Health > 300)
							{
								A_SetHealth(300);
							}
						}
					}
				}
				else
				{
					A_GiveInventory("ChaosEnergy", 50);
					if (Health < 300)
					{
						A_GiveInventory("Health", 50);
						if (Health > 300)
						{
							A_SetHealth(300);
						}
					}
				}
			}
			Stop;
  }
}

class ChaosRing : Ring replaces ArmorBonus // 2015
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "$p_chaosring";
		Inventory.PickupSound "spickup/ring";
		+COUNTITEM
		+NOGRAVITY
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
		Spawn:
			RIN3 ABCDEFGHIJKLMNOP 1 Bright A_SetScale(1, 0.9);
			Loop;
		Pickup:
			TNT1 A 5
			{
				if ((CountInv("PowerHyper") || (CountInv("PowerSuper")) && (CountInv("AmyCheck")))) {
					A_GiveInventory("ChaosEnergy", 4);
				}
				else if (CountInv("PowerSuper")) {
					A_GiveInventory("ChaosEnergy", 2);
				}
				else {
					A_GiveInventory("Health", 5);
					A_GiveInventory("ChaosEnergy", 1);
				}
			}
			Stop;
		}
}

class ChaosRingGravity : ChaosRing { Default { -NOGRAVITY } }

class SoulRing : Ring
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "$p_soulring";
		Inventory.PickupSound "spickup/ring";
		+COUNTITEM
		+INVENTORY.ALWAYSPICKUP
	}
	States
	{
		Spawn:
			RIN4 ABCDEFGHIJKLMNOP 1 Bright A_SetScale(1, 0.9);
			Loop;
		Pickup:
			TNT1 A 5 A_GiveInventory("ChaosEnergy", 50);
			Stop;
	}
}

class SoulRecharge : CustomInventory
{
	Default
	{
		Inventory.PickupMessage "$p_soulrecharge";
		Inventory.PickupSound "spickup/specialring";
	}
	States
	{
		Spawn:
			PSTR A -1 Bright;
			Stop;
		Pickup:
			TNT1 A 0 A_GiveInventory("ChaosEnergy", 200);
			Stop;
	}
}
class EmeraldRecharge : CustomInventory
{
	Default
	{
		Inventory.PickupMessage "$p_emeraldrecharge";
		Inventory.PickupSound "spickup/specialring";
	}
	States
	{
		Spawn:
			CPAK A -1 Bright;
			Stop;
		Pickup:
			TNT1 A 0 A_GiveInventory("ChaosEnergy", 500);
			Stop;
	}
}
class InvincibilityBox : CustomInventory
{
	Default
	{
		Inventory.PickupMessage "$p_invincibility";
		Inventory.PickupSound "spickup/boxdestroy";
		+COUNTITEM
	}
	States
	{
		Spawn:
			INVC A -1 Bright;
			Stop;
		Pickup:
			TNT1 A 0
			{
				if (CountInv("ClassicCheck", AAPTR_PLAYER1)) {
					A_GiveInventory("ClassicInvincibility", 1);
				}
				else {
					A_GiveInventory("Invincibility", 1);
				}
			}
			TNT1 A 0 ACS_NamedExecute("Invincibility");
			Stop;
	}
}
class ShadowFever : CustomInventory
{
	Default
	{
		Inventory.PickupMessage "$p_shadowfever";
		Inventory.PickupSound "spickup/boxdestroy";
		+COUNTITEM
	}
	States
	{
		Spawn:
			SHAF A -1 Bright;
			Stop;
		Pickup:
			TNT1 A 0 A_GiveInventory("Invincibility", 1);
			TNT1 A 0 ACS_NamedExecute("Invincibility");
			Stop;
	}
}
class ChaosEmeralds : CustomInventory
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "";
		Inventory.PickupSound "spickup/chaosemerald";
		+COUNTITEM
		+INVENTORY.INVBAR
	}
	States
	{
		Spawn:
			CHSM A -1 Bright;
			Stop;
		Pickup:
			TNT1 A 0 ACS_NamedExecute("ChaosEmeraldHandler");
			Stop;
		Use:
			TNT1 A 0 A_TakeInventory("ChaosEmeralds", 1);
			TNT1 A 0
			{
				if (Health > CountInv("ChaosEnergy")) {
					A_SetInventory("ChaosEnergy", Health);
				}
				if (CountInv("AmyCheck") > 0) {
					A_SetHealth(1);
				}
				else {
					A_SetHealth(999);
				}
				if (CountInv("ChaosEnergy") < 100) {
					A_SetInventory("ChaosEnergy", 100);
				}
			}
		SuperTransform:
			TNT1 A 0 A_JumpIf(CountInv("PowerSuper"), "HyperTransform");
			TNT1 A 0 {
				A_GiveInventory("SuperForm", 1);
				A_GiveInventory("SuperInvincibility", 1);
				A_PlaySound("sglobal/supersonic", 6);
				A_PlaySound("sglobal/supertransform", 4);
				if (CountInv("SonicCheck"))  {
					ACS_NamedExecute("Subtitles", 0, 5);
				}
				else if (CountInv("AmyCheck")) {
					ACS_NamedExecute("Subtitles", 0, 6);
				}
				else if (CountInv("ShadowCheck")) {
					ACS_NamedExecute("Subtitles", 0, 7);
				}
				else if (CountInv("ClassicCheck")) {
					ACS_NamedExecute("Subtitles", 0, 8);
				}
			}
			TNT1 A 0 ACS_NamedExecute("TransformSuper");
			TNT1 A 0 ACS_NamedExecuteAlways("TakeRingsIfSuper");
			Stop;
		HyperTransform:
			TNT1 A 0 {
				A_TakeInventory("PowerSuper", 1);
				A_GiveInventory("HyperForm", 1);
				A_PlaySound("sglobal/supersonic", 6);
				A_PlaySound("sglobal/supertransform", 4);
				if (CountInv("SonicCheck"))  {
					A_StartSound("super/sonich", 6);
					ACS_NamedExecute("Subtitles", 0, 9);
				}
				else if (CountInv("ClassicCheck")) {
					A_StartSound("super/classich", 6);
					ACS_NamedExecute("Subtitles", 0, 10);
				}
			}
			TNT1 A 0 ACS_NamedExecute("TransformHyper", 0);
			TNT1 A 0 ACS_NamedExecute("TakeRingsIfHyper", 0);
			Stop;
		}
}

class ChaosCapsule : ChaosEnergy // 6021
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "$p_chaoscapsule1";
		Inventory.Amount 20;
		ChaosEnergy.ReducedAmount 20;
	}
	States
	{
		Spawn:
			CHSC A -1 Bright;
			Stop;
	}
}
class BlueChaosCapsule : ChaosEnergy // 6022
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "$p_chaoscapsule2";
		Inventory.Amount 100;
		ChaosEnergy.ReducedAmount 50;
	}
	States
	{
		Spawn:
			CHSC B -1 Bright;
			Stop;
	}
}
class RedChaosCapsule : ChaosEnergy // 6023
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "$p_chaoscapsule3";
		Inventory.Amount 400;
		ChaosEnergy.ReducedAmount 250;
	}
	States
	{
		Spawn:
			CHSC C -1 Bright;
			Stop;
	}
}
class FadingChaosCapsule : ChaosCapsule
{
	States
	{
		Spawn:
			CHSC A 30 Bright;
			Goto Fade;
		Fade:
			CHSC A 9 Bright;
			TNT1 A 9 Bright;
			CHSC A 7 Bright;
			TNT1 A 7 Bright;
			CHSC A 7 Bright;
			TNT1 A 5 Bright;
			CHSC A 5 Bright;
			TNT1 A 5 Bright;
			CHSC A 5 Bright;
			TNT1 A 5 Bright;
			CHSC A 3 Bright;
			TNT1 A 3 Bright;
			CHSC A 3 Bright;
			TNT1 A 3 Bright;
			CHSC A 3 Bright;
			TNT1 A 3 Bright;
			CHSC A 3 Bright;
			TNT1 A 1 Bright;
			CHSC A 1 Bright;
			TNT1 A 1 Bright;
			CHSC A 1 Bright;
			TNT1 A 1 Bright;
			Stop;
	}
}

class FadingBlueChaosCapsule : BlueChaosCapsule
{
	States
	{
		Spawn:
			CHSC B 10 Bright;
			Goto Fade;
		Fade:
			CHSC B 9 Bright;
			TNT1 B 9 Bright;
			CHSC B 7 Bright;
			TNT1 B 7 Bright;
			CHSC B 7 Bright;
			TNT1 B 5 Bright;
			CHSC B 5 Bright;
			TNT1 B 5 Bright;
			CHSC B 5 Bright;
			TNT1 B 5 Bright;
			CHSC B 3 Bright;
			TNT1 B 3 Bright;
			CHSC B 3 Bright;
			TNT1 B 3 Bright;
			CHSC B 3 Bright;
			TNT1 B 3 Bright;
			CHSC B 3 Bright;
			TNT1 B 1 Bright;
			CHSC B 1 Bright;
			TNT1 B 1 Bright;
			CHSC B 1 Bright;
			TNT1 B 1 Bright;
			Stop;
	}
}

class FadingRedChaosCapsule : RedChaosCapsule
{
	States
	{
		Spawn:
			CHSC C 20 Bright;
			Goto Fade;
		Fade:
			CHSC C 12 Bright;
			TNT1 C 12 Bright;
			CHSC C 10 Bright;
			TNT1 C 10 Bright;
			CHSC C 10 Bright;
			TNT1 C 10 Bright;
			CHSC C 7 Bright;
			TNT1 C 7 Bright;
			CHSC C 7 Bright;
			TNT1 C 5 Bright;
			CHSC C 5 Bright;
			TNT1 C 5 Bright;
			CHSC C 5 Bright;
			TNT1 C 5 Bright;
			CHSC C 3 Bright;
			TNT1 C 3 Bright;
			CHSC C 3 Bright;
			TNT1 C 3 Bright;
			CHSC C 3 Bright;
			TNT1 C 3 Bright;
			CHSC C 3 Bright;
			TNT1 C 1 Bright;
			CHSC C 1 Bright;
			TNT1 C 1 Bright;
			CHSC C 1 Bright;
			TNT1 C 1 Bright;
			Stop;
	}
}

class MacAndCheese : CustomInventory
{
	Default
	{
		Inventory.PickupMessage "$p_macandcheese";
	}
	States
	{
		Spawn:
			FMAC A -1 Bright;
			Stop;
		Pickup:
			TNT1 A 0 A_Print("$shadow_macandcheese");
			TNT1 A 0 A_GiveInventory("Health", 100);
			TNT1 A 0 A_GiveInventory("ChaosEnergy", 100);
			Stop;
	}
}

class GoalRing : CustomInventory // 262
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "";
		Inventory.PickupSound "spickup/goalring";
		Radius 64;
		Height 100;
        XScale 3.0;
        YScale 2.5;
		+NOGRAVITY
	}
	States
	{
		Spawn:
			GOAL ABCDEFGHIJ 4 Bright;
			Loop;
		Pickup:
			TNT1 A 0 ACS_NamedExecute("GoalRing");
			Stop;
	}
}

class Nintendo64 : CustomInventory replaces Infrared // 2045
{
	Default
	{
		//$Category Lock & Load Pickups
		Inventory.PickupMessage "$p_nintendo64";
	}
	States
	{
		Spawn:
			NINT A -1 Bright;
		Pickup:
			NINT A 0 A_GiveInventory("Infrared");
			NINT A 0
			{
				if (CountInv("SonicCheck"))
				{
					A_Print("$sonic_nintendo64");
					ACS_NamedExecute("SonicN64");
				}
			}
	}
}

class FakeBackpack : CustomInventory
{
	Default
	{
		Inventory.PickupMessage "$p_backpack";
	}
	States
	{
		Spawn:
			BPAK A -1 Bright;
			Stop;
		Pickup:
			TNT1 A 0
			{
				if (CountInv("SonicCheck"))
				{
					ACS_NamedExecute("Subtitles", 0, 19);
				}
				else if (CountInv("AmyCheck"))
				{
					ACS_NamedExecute("Subtitles", 0, 20);
				}
				else if (CountInv("ClassicCheck"))
				{
					ACS_NamedExecute("Subtitles", 0, 21);
				}
			}
			Stop;
	}
}

class FakeChainsaw : CustomInventory
{
	Default
	{
		Inventory.PickupMessage "Picked up a useless chainsaw.";
	}
	States
	{
		Spawn:
			CSAW A -1;
			Stop;
		Pickup:
			TNT1 A 0 ACS_NamedExecute("Subtitles", 0, 22);
			Stop;
	}
}

class WtfIsThis : Inventory
{
	Default { Inventory.PickupMessage ""; }
	States
	{
		Spawn:
			TNT1 A 0 NoDelay
			{
				if (CountInv("ShadowCheck", AAPTR_PLAYER1)) {
					A_SpawnItem("ShadowKnife");
				} else {
					A_SpawnItem("RedChaosCapsule");
				}
			}
			Stop;
	}
}

class KeyTablet : Inventory
{
	Default
	{
		Inventory.PickupMessage "$p_keytablet";
		Inventory.PickupSound   "spickup/keytablet";
	}
	States
	{
		Spawn:
			KTBL A -1;
			Stop;
	}
}
