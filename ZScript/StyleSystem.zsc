class StyleSystem : EventHandler
{
	int score;
	int deprecation_tick;
	int reward_tick;
	string current_weapon;
	int consecutive_uses;
    const SCORE_THRESHOLD = 25000;

    actor CheckTarget(int distance)
    {
        PlayerPawn player = players[consoleplayer].mo;
        FTranslatedLineTarget ltinfo;
        bool ltattack = player.LineAttack(player.angle, distance, player.pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 0);
        return ltinfo.linetarget;
    }
	override void WorldThingDamaged(WorldEvent e)
	{
		bool is_attackable_target = e.thing.bIsMonster || e.thing.GetClassName() == "Doox";

		if (!cvar.FindCvar("StyleSystem").GetBool())
			return;

		if (e.thing && e.thing is "PlayerPawn") {
			DeductStyleScore(e);
		}
		else if (e.thing && is_attackable_target && !(e.damagesource && e.damagesource.bIsMonster) && !(e.inflictor && e.inflictor.bIsMonster)) {
			UpdateStyleScore(e);
		}
	}

    override void NetworkProcess(ConsoleEvent e)
    {
        if (e.Name == "taunt") {
            Actor lookat_target = CheckTarget(512);
            if (lookat_target && (lookat_target.bIsMonster || lookat_target.GetClassName() == "Doox")) {
                int score_bonus = SCORE_THRESHOLD / 6;
                int rank = cvar.FindCvar("StyleRank").GetInt() + 1;

                score += score_bonus;
                CapStyleScore();
            }
            CallACS("Taunt");
        }
    }


	override void WorldTick()
	{
		if (!cvar.FindCvar("StyleSystem").GetBool())
			return;

		UpdateStyleRank();
		DeprecateStyleScore();
	}

	private void UpdateStyleScore(WorldEvent e)
	{
		PlayerPawn player = players[consoleplayer].mo;
		let ReadyWeapon = player.player.ReadyWeapon;
		let PlayerIsResponsible = e.damagesource && e.damagesource is "PlayerPawn";
		if (ReadyWeapon && ReadyWeapon.GetClassName() == current_weapon && PlayerIsResponsible) {
			consecutive_uses++;
		}

		/* Initialisation */
		int stylerank = cvar.FindCvar("StyleRank").GetInt();
		int scorebonus;
        string style_bonus;

		/* Base increment */
		if (PlayerIsResponsible) {
			scorebonus += SCORE_THRESHOLD / random(8, 10);
		}
		else {
			if (stylerank >= 1) {
				scorebonus += SCORE_THRESHOLD / random(13, 15);
			}
			else {
				return;
			}
		}

		UpdateWeapon();

        scorebonus = GetStyleBonuses(e, scorebonus);

		bool offhand_attack_used = e.DamageType == "SonicKick" ||
								   e.DamageType == "ShadowMelee" ||
                                   e.DamageType == "Spear" ||
								   e.DamageType == "Piko" ||
								   e.DamageType == "SonicPunch";

        int staleness_factor = SCORE_THRESHOLD / 150;
        int staleness = staleness_factor * consecutive_uses;
        staleness *= cvar.FindCvar("StaleMultiplier").GetFloat();
        staleness = clamp(staleness, 0, scorebonus);

		if (!offhand_attack_used) {
			scorebonus -= staleness;
		}

        let used_weapon = ReadyWeapon.GetClassName();
        bool spread_attack_used = used_weapon == "KineticShotty" ||
                                  used_weapon == "QuadShotty" ||
                                  used_weapon == "SpeedyShotgun" ||
                                  e.DamageType == "SonicPunch";

        if (spread_attack_used) {
            scorebonus /= 5;
        }

		score += scorebonus;

        CapStyleScore();

		/* It isn't here, but the player can also gain style
           by parrying attacks, which is handled in the files
           under the Player directory. */
	}

    private int GetStyleBonuses(WorldEvent e, int scorebonus)
    {
		PlayerPawn player = players[consoleplayer].mo;
		let ReadyWeapon = player.player.ReadyWeapon;

        /* Player is mid-air */
		if (!player.player.onground) {
			scorebonus *= 1.3;
		}

        /* Player is crouch sliding */
        bool is_moving = sqrt(player.vel.x ** 2 + player.vel.y ** 2) > 0.0;
        if (cvar.FindCvar("IsCrouching").GetBool() && is_moving) {
            scorebonus *= 2;
        }

		/* Enemy is mid-air */
		if (e.thing.Pos.Z > e.thing.GetZAt()) {
			scorebonus *= 2;
		}

        /* Enemy was killed */
        if (e.damage > e.thing.Health) {
            scorebonus *= 2;
        }

		/* Different weapon used */
		if (ReadyWeapon.GetClassName() != current_weapon) {
			scorebonus *= 2;
		}

        return scorebonus;
    }

    private void CapStyleScore()
    {
        int max_score = SCORE_THRESHOLD * 9;
        score = clamp(score, 0, max_score);
    }

	private void DeductStyleScore(WorldEvent e)
	{
		int penalty = SCORE_THRESHOLD;

        bool does_damage_more_than_once =
            e.Inflictor is "SLL_Shotgunner" ||
            e.Inflictor is "SLL_Chaingunner" ||
            e.Inflictor is "SLL_Cyberdemon" ||
            e.Inflictor is "SLL_SpiderMastermind";

        if (e.Inflictor != null && does_damage_more_than_once) {
            penalty /= 25;
        }

		score -= penalty;
	}

    private void DeprecateStyleScore()
    {
        PlayerPawn player = players[consoleplayer].mo;
        int stylerank = cvar.FindCvar("StyleRank").GetInt();

        int start_value = 48;
        int step = 128;
        int deprecation = start_value + stylerank * step;

        if (deprecation_tick > 2) {
            deprecation_tick = 0;
            score -= deprecation;
        }
    }

    private void UpdateStyleRank()
    {
        PlayerPawn player = players[consoleplayer].mo;
        if (score < 0 || player.health <= 0) score = 0;
        cvar.FindCvar("StyleScore").SetInt(score);

        deprecation_tick++;
        reward_tick++;

        // Set your Style Rank
        int rank_index = score / SCORE_THRESHOLD;
        rank_index = clamp(rank_index, 0, 8);
        cvar.FindCvar("StyleRank").SetInt(rank_index);

        // Obtain Style Rank to sync up
        int style_rank = cvar.FindCvar("StyleRank").GetInt();

        if (style_rank >= 3) {
            GiveStyleRewards(player, style_rank);
        }
    }

	private void GiveStyleRewards(Actor player, int style_rank)
	{
		bool is_transformed = player.CountInv("PowerSuper") || player.CountInv("PowerHyper");
		bool rewards_enabled = cvar.FindCvar("StyleBonuses").GetBool();

		if (is_transformed && rewards_enabled) {
			return;
		}

		int delay;
        int multiplier;

		switch (style_rank) {
			case 8:
			case 7:
				delay = 1;
                multiplier = 2;
				break;
			case 6:
				delay = 1;
                multiplier = 1;
				break;
			case 5:
				delay = 2;
                multiplier = 2;
				break;
			case 4:
				delay = 2;
                multiplier = 1;
				break;
			case 3:
			default:
				delay = 3;
                multiplier = 1;
				break;
		}

		if (reward_tick % delay == 0) {
			player.A_GiveInventory("ChaosEnergy", multiplier);
		}
	}

	private void UpdateWeapon()
	{
		PlayerPawn player = players[consoleplayer].mo;

		/* If the player's weapon has previously been
		   switched, reset the amount of consecutive
		   uses and reset their current weapon. */
		if (player.player.ReadyWeapon && player.player.ReadyWeapon.GetClassName() != current_weapon) {
			consecutive_uses = 0;
			current_weapon = player.player.ReadyWeapon.GetClassName();
		}
	}
}