class StyleSystem : EventHandler
{
	int score;
	int deprecation_tick;
	int reward_tick;
	string current_weapon;
	int consecutive_uses;
    Actor old_lookat_target;
    string style_bonus;
    const SCORE_THRESHOLD = 25000;

    bool ignore_style;
    int buffer_timer;
    const buffer_duration = 3;

    /* Style bonus colours */
    const STYLE_KILL = "Green";
    const STYLE_POSITIONING = "Yellow";
    const STYLE_SPECIAL = "Sapphire";

    actor CheckTarget(int distance)
    {
        PlayerPawn player = players[consoleplayer].mo;
        FTranslatedLineTarget ltinfo;
        bool ltattack = player.LineAttack(player.angle, distance, player.pitch, 0, 'None', "InvisiblePuff", LAF_NORANDOMPUFFZ, ltinfo, 0);
        return ltinfo.linetarget;
    }
	override void WorldThingDamaged(WorldEvent e)
	{
		bool is_attackable_target = e.thing.bIsMonster || e.thing.GetClassName() == "Doox";

		if (e.thing && e.thing is "PlayerPawn") {
			DeductStyleScore(e);
		}
		else if (e.thing && is_attackable_target && !(e.damagesource && e.damagesource.bIsMonster) && !(e.inflictor && e.inflictor.bIsMonster) && !ignore_style) {
			UpdateStyleScore(e);
		}
	}

    void ParryBonus(int health, int damage)
    {
        PlayerPawn player = players[consoleplayer].mo;
        bool is_probably_recharging = player.DamageFactor == 2;
        if (is_probably_recharging) {
            SetStyleBonus("$sbonus_rskparry", STYLE_SPECIAL);
            score += SCORE_THRESHOLD * 1.7;
        }
        else if (damage >= health) {
            SetStyleBonus("$sbonus_bigparry", STYLE_SPECIAL);
            score += SCORE_THRESHOLD * 1.5;
        }
        else {
            SetStyleBonus("$sbonus_parry", STYLE_SPECIAL);
            score += SCORE_THRESHOLD;
            CapStyleScore();
        }
    }

    void DeflectBonus(int health, int damage)
    {
        if (damage >= health) {
            SetStyleBonus("$sbonus_bdeflect", STYLE_SPECIAL);
            score += SCORE_THRESHOLD * 1.5;
        }
        else {
            SetStyleBonus("$sbonus_deflect", STYLE_SPECIAL);
            score += SCORE_THRESHOLD;
            CapStyleScore();
        }
    }

    void RocketBonus()
    {
        SetStyleBonus("$sbonus_rocket", STYLE_SPECIAL);
    }

    void EnemyJumpBonus()
    {
        SetStyleBonus("$sbonus_ejump", STYLE_POSITIONING);
        score += 18000;
        CapStyleScore();
    }

    void SetStyleBonus(string bonus_name, string colour)
    {
        let current_style_bonus = cvar.FindCvar("LastStyleBonus").GetString();
        let constructed_bonus = "+\c[" .. colour .. "]" .. StringTable.Localize(bonus_name);
        style_bonus = constructed_bonus;
        if (cvar.FindCvar("ShowStyleBonuses").GetBool()) {
            console.Printf("%s", style_bonus);
        }
        UpdateStyleBonusCvar();
    }

    void UpdateStyleBonusCvar()
    {
        cvar.FindCvar("LastStyleBonus").SetString(style_bonus);
    }

    bool CanTakeDamage()
    {
        // Used for the "Must Style" gameplay modifier

        let must_style = cvar.FindCvar("MustStyle").GetBool();
        let style_rank = cvar.FindCvar("StyleRank").GetInt();

        return !must_style || style_rank >= 5;
    }

    override void NetworkProcess(ConsoleEvent e)
    {
        if (e.Name == "taunt") {
            Actor lookat_target = CheckTarget(1024);
            if (lookat_target == null) {
                CallACS("Taunt");
                return;
            }
            bool is_different_target = lookat_target != old_lookat_target;
            bool can_style_on_target = lookat_target.bIsMonster || lookat_target.GetClassName() == "Doox";
            if (is_different_target && can_style_on_target) {
                score += SCORE_THRESHOLD + (SCORE_THRESHOLD / 10);
                SetStyleBonus("$sbonus_taunt", STYLE_SPECIAL);
                CapStyleScore();
            }
            CallACS("Taunt");
            old_lookat_target = lookat_target;
        }
    }

    void SetBuffer()
    {
        ignore_style = true;
        buffer_timer = 0;
    }

	override void WorldTick()
	{
        if (ignore_style) {
            buffer_timer++;
            if (buffer_timer >= buffer_duration) {
                ignore_style = false;
            }
        }
		UpdateStyleRank();
		DeprecateStyleScore();
	}

	private void UpdateStyleScore(WorldEvent e)
	{
		PlayerPawn player = players[consoleplayer].mo;
		let ReadyWeapon = player.player.ReadyWeapon;
		let PlayerIsResponsible = e.damagesource && e.damagesource is "PlayerPawn";
		if (ReadyWeapon && ReadyWeapon.GetClassName() == current_weapon && PlayerIsResponsible) {
			consecutive_uses++;
		}

		/* Initialisation */
		int stylerank = cvar.FindCvar("StyleRank").GetInt();
		int scorebonus;
        string style_bonus;
        int score_divider = random(23, 25);
        int damage_bonus = clamp(e.damage * 7, 0, SCORE_THRESHOLD);

		/* Base increment */
		if (PlayerIsResponsible) {
			scorebonus += SCORE_THRESHOLD / score_divider + damage_bonus;
		}
		else {
			if (stylerank >= 1) {
				scorebonus += SCORE_THRESHOLD / (score_divider + 6);
			}
			else {
                GetStyleBonuses(e, scorebonus);
			}
		}

		UpdateWeapon();

        scorebonus = GetStyleBonuses(e, scorebonus);

		bool offhand_attack_used = e.DamageType == "SonicKick" ||
								   e.DamageType == "ShadowMelee" ||
                                   e.DamageType == "Spear" ||
								   e.DamageType == "Piko" ||
								   e.DamageType == "SonicPunch";

        int staleness_factor = SCORE_THRESHOLD / 245;
        int staleness = staleness_factor * consecutive_uses;
        staleness *= GetStalenessMultiplierFromWeapons(player);
        staleness *= cvar.FindCvar("StaleMultiplier").GetFloat();
        staleness = clamp(staleness, 0, scorebonus);

		if (!offhand_attack_used) {
			scorebonus -= staleness;
		}

		score += scorebonus;

        CapStyleScore();
	}

    private int GetStyleBonuses(WorldEvent e, int scorebonus)
    {
		PlayerPawn player = players[consoleplayer].mo;
		let ReadyWeapon = player.player.ReadyWeapon;

        let enemy_killed = e.thing.Health <= 0;

        /* Player is crouch sliding */
        bool is_moving = sqrt(player.vel.x ** 2 + player.vel.y ** 2) > 0.0;
        bool crouch_sliding = cvar.FindCvar("IsCrouching").GetBool() && is_moving;
        bool slide_dashing = cvar.FindCvar("Sliding").GetBool();
        if (crouch_sliding || slide_dashing) {
            scorebonus *= 2;
            if (enemy_killed) {
                SetStyleBonus("$sbonus_slide", STYLE_POSITIONING);
            }
        }

        /* Mid-air bonuses */
        let player_air = !player.player.onground;
        let enemy_air  = e.thing.Pos.Z > e.thing.GetZAt();
        if (player_air && enemy_air) {
            scorebonus *= 3;
            if (enemy_killed) {
                SetStyleBonus("$sbonus_both_air", STYLE_POSITIONING);
            }
        }
        else {
            if (player_air) {
                scorebonus *= 1.3;
                if (enemy_killed) {
                    SetStyleBonus("$sbonus_self_air", STYLE_POSITIONING);
                }
            }

            if (enemy_air) {
                scorebonus *= 2;
                if (enemy_killed) {
                    SetStyleBonus("$sbonus_enem_air", STYLE_POSITIONING);
                }
            }
        }

        let player_above_enemy = false;
        if (e.damagesource) {
            player_above_enemy = e.damagesource.Pos.Z > e.thing.Pos.Z;
        }

        let player_enemy_distance = 300.0;
        if (e.damagesource && e.thing) {
            player_enemy_distance = e.damagesource.Distance3D(e.thing);
        }

        /* Enemy was killed */
        if (enemy_killed) {
            /* Attack from afar */
            if (e.damagesource) {
                if (player_enemy_distance >= 2048) {
                    scorebonus *= 2;
                    SetStyleBonus("$sbonus_longshot", STYLE_POSITIONING);
                }
            }
            /* Enemy that was killed was previously taunted at */
            if (e.thing == old_lookat_target) {
                scorebonus *= 4;
                SetStyleBonus("$sbonus_taunt_k", STYLE_KILL);
            }
            else {
                if (player_above_enemy) {
                    scorebonus *= 2;
                    SetStyleBonus("$sbonus_kill_air", STYLE_KILL);
                }

                if (e.damage > e.thing.SpawnHealth()) {
                    scorebonus *= 2.5;
                    SetStyleBonus("$sbonus_overkill", STYLE_KILL);
                }
                else {
                    scorebonus *= 2;
                    SetStyleBonus("$sbonus_kill", STYLE_KILL);
                }
            }
            /* Enemy was killed with a parry */
            if (e.damagetype == "Parry") {
                scorebonus += SCORE_THRESHOLD / 2;
                SetStyleBonus("$sbonus_parry_k", STYLE_KILL);
            }
            /* Enemy fell off-stage in Cyber Space Arena */
            if (e.damagetype == "Falling") {
                scorebonus += 20000;
                SetStyleBonus("$sbonus_fall", STYLE_KILL);
            }
            /* Shotgun bonus */
            let current_weapon = player.player.ReadyWeapon;
            if (current_weapon) {
                let weapon_name = current_weapon.GetClassName();
                bool is_shotgun = weapon_name == "KineticShotty" || weapon_name == "QuadShotty";
                if (is_shotgun && player_enemy_distance <= 150.0) {
                    scorebonus *= 2;
                    SetStyleBonus("$sbonus_pblank", STYLE_KILL);
                }
            }
        }

        return scorebonus;
    }

    private void CapStyleScore()
    {
        int max_score = SCORE_THRESHOLD * 9;
        score = clamp(score, 0, max_score);
    }

	private void DeductStyleScore(WorldEvent e)
	{
		int penalty = SCORE_THRESHOLD;

        bool does_damage_more_than_once =
            e.Inflictor is "SLL_Shotgunner" ||
            e.Inflictor is "SLL_Chaingunner" ||
            e.Inflictor is "SLL_Cyberdemon" ||
            e.Inflictor is "SLL_SpiderMastermind";

        if (e.Inflictor != null && does_damage_more_than_once) {
            penalty /= 25;
        }

		score -= penalty;
	}

    private void DeprecateStyleScore()
    {
        PlayerPawn player = players[consoleplayer].mo;
        int stylerank = cvar.FindCvar("StyleRank").GetInt();

        int start_value = 96;
        int step = 128;
        int deprecation = start_value + stylerank * step;

        if (deprecation_tick > 1) {
            deprecation_tick = 0;
            score -= deprecation;
        }
    }

    private void UpdateStyleRank()
    {
        PlayerPawn player = players[consoleplayer].mo;
        if (score < 0 || player.health <= 0) score = 0;
        cvar.FindCvar("StyleScore").SetInt(score);

        deprecation_tick++;
        reward_tick++;

        // Set your Style Rank
        int rank_index = score / SCORE_THRESHOLD;
        rank_index = clamp(rank_index, 0, 8);
        cvar.FindCvar("StyleRank").SetInt(rank_index);

        // Obtain Style Rank to sync up
        int style_rank = cvar.FindCvar("StyleRank").GetInt();

        if (style_rank >= 1) {
            GiveStyleRewards(player, style_rank);
        }
    }

    private int GetValidWeaponCount(PlayerPawn player)
    {
        int valid_weapons = 0;

        for (let i = 0; i <= 6; i++) {
            int slot_size = player.player.weapons.SlotSize(i);

            for (let j = 0; j < slot_size; j++) {
                let weapon_class_type = player.player.weapons.GetWeapon(i, j);

                if (weapon_class_type && player.CountInv(weapon_class_type)) {
                    valid_weapons += 1;
                }
            }
        }

        return valid_weapons;
    }

    private double GetStalenessMultiplierFromWeapons(PlayerPawn player) 
    {
        double multiplier = 0;

        switch (GetValidWeaponCount(player)) {
            // The player has a full arsenal
            case 6:
                multiplier = 1; // full staleness
                break;
            // The player has picked up three extra weapons
            case 5:
                multiplier = 0.8;
                break;
            // The player has picked up two extra weapons
            case 4:
                multiplier = 0.5; // half staleness
                break;
            // The player has picked up one extra weapon
            case 3:
                multiplier = 0.3;
                break;
            // The player only has the weapons they spawned with
            default:
                multiplier = 0; // no staleness
                break;
        }

        return multiplier;
    }

	private void GiveStyleRewards(Actor player, int style_rank)
	{
		bool is_transformed = player.CountInv("PowerSuper") || player.CountInv("PowerHyper");
		bool rewards_enabled = cvar.FindCvar("StyleBonuses").GetBool();

		if (is_transformed && rewards_enabled) {
			return;
		}

		int delay;
        int multiplier;

		switch (style_rank) {
			case 8:
			case 7:
				delay = 1;
                multiplier = 4;
				break;
			case 6:
				delay = 1;
                multiplier = 2;
				break;
			case 5:
				delay = 1;
                multiplier = 1;
				break;
			case 4:
				delay = 2;
                multiplier = 2;
				break;
			case 3:
				delay = 2;
                multiplier = 1;
				break;
			default:
                delay = 3;
                multiplier = 1;
				break;
		}

		if (reward_tick % delay == 0) {
			player.A_GiveInventory("ChaosEnergy", multiplier);
		}
	}

	private void UpdateWeapon()
	{
		PlayerPawn player = players[consoleplayer].mo;

		/* If the player's weapon has previously been
		   switched, reset the amount of consecutive
		   uses and reset their current weapon. */
		if (player.player.ReadyWeapon && player.player.ReadyWeapon.GetClassName() != current_weapon) {
			consecutive_uses = 0;
            SetStyleBonus("$sbonus_swap", "Sapphire");
			current_weapon = player.player.ReadyWeapon.GetClassName();
		}
	}
}